# -*- coding: utf-8 -*-
from decimal import *
import telebot
import datetime
from telebot import types, apihelper
from telebot.apihelper import ApiTelegramException
import time
import os,random,shutil,subprocess, string
import json
import requests
from datetime import datetime, timedelta
from datetime import date
from dateutil.relativedelta import relativedelta
import hashlib
from mysql.connector import connect, Error
import re
from string import whitespace

from pycrystalpay import CrystalPay
import json
import urllib.request

from pyqiwip2p import QiwiP2P

qiwi_p2p_token = 'eyJ2ZXJzaW9uIjoiUDJQIiwiZGF0YSI6eyJwYXlpbl9tZXJjaGFudF9zaXRlX3VpZCI6ImtjeWF2dS0wMCIsInVzZXJfaWQiOiI3OTUyMjY5MjM4OCIsInNlY3JldCI6ImI0ZTUxNGNkZWYxY2JkOGRmYzZhNDI2YWZkYWRlM2NiYmY4NDI1ZjUyM2ZhYjkwOGY1ZWRmY2FmODcwZDdjM2EifX0='
p2p = QiwiP2P(auth_key=qiwi_p2p_token)


bd_host = '91.227.16.15'
bd_login = 'h162659_fran'
bd_pass = 'kQ0rY7fM7jnD1l'
bd_base = 'h162659_franshiza'

botnames = os.path.basename(os.path.abspath(os.path.dirname(__file__)))
connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
q = connection.cursor()
q.execute(f'SELECT bot_token FROM list_bot WHERE bot = "{botnames}"')
bot_token = q.fetchone()[0]
bot = telebot.TeleBot(bot_token)
bot_name = bot.get_me().username
q.execute(f'SELECT bot_token FROM list_bot WHERE bot = "{botnames}"')
#bot_create = q.fetchone()[0]
connection.close()
#bot_create = telebot.TeleBot(bot_create)
users_zadanie = []
bot = telebot.TeleBot(bot_token)

bot_name = bot.get_me().username

print(bot_name)

def is_subscribed(user_id):
	try:
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		q.execute(f'SELECT chanel_id FROM chanel WHERE bot = "{bot_name}"')
		row = q.fetchone()
		connection.close()
		if row != None:
			try:
				invite_link =  bot_create.create_chat_invite_link(chat_id = row[0], member_limit = 1).invite_link
			except:
				return True
			status = ['creator', 'administrator', 'member','restricted']
			for i in status:
				if i == bot_create.get_chat_member(row[0], user_id).status:
					return True
			return False
		else:
			return True

	except ApiTelegramException as e:
		print(e.result_json['description'])
		if e.result_json['description'] == 'Bad Request: user not found':
			return False
		if e.result_json['description'] == 'Bad Request: chat not found':
			return True
		if e.result_json['description'] == 'Forbidden: bot was kicked from the channel chat':
			return True
		if e.result_json['description'] == 'Bad Request: CHAT_ADMIN_REQUIRED':
			return True



@bot.message_handler(commands=['start'])
def start_message(message):
	if message.chat.type == 'private':
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		q.execute(f'SELECT * FROM ugc_users WHERE id = "{message.chat.id}" and bot = "{bot_name}"')
		row = q.fetchall()
		if len(row) == 0:
			data = datetime.now().strftime('%d/%m/%Y')
			q.execute("INSERT INTO ugc_users (id,bot,data,status) VALUES ('%s','%s','%s','%s')"%(message.chat.id,bot_name,data,'–ê–∫—Ç–∏–≤–µ–Ω'))
			connection.commit()
			if message.text[7:] != '' and message.text[7:] != message.chat.id:
				q.execute(f"update ugc_users set ref = '{message.text[7:]}' where id = {message.chat.id} and bot = '{bot_name}'")
				connection.commit()
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text='‚ÜóÔ∏è –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è ',url=f'https://telegra.ph/Pravila--Usloviya-01-25'))
			keyboard.add(types.InlineKeyboardButton(text='‚úîÔ∏è –Ø –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è –∏ —Å–æ–≥–ª–∞—Å–µ–Ω —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–µ—Ä–≤–∏—Å–∞ !',callback_data=f'–º–µ–Ω—é '))
			bot.send_message(message.chat.id,f'''<b>‚ùóÔ∏è –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–º –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ —Å–µ—Ä–≤–∏—Å–∞.</b>''',parse_mode='HTML',reply_markup=keyboard)
		else:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text='üéõ –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é',callback_data=f'–º–µ–Ω—é '))
			bot.send_message(message.chat.id, '''–ü—Ä–∏–≤–µ—Ç üëã
–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é, —á—Ç–æ–±—ã —Å–æ –º–Ω–æ–π –æ–±—â–∞—Ç—å—Å—è üí¨''' ,parse_mode='HTML',reply_markup=keyboard)

		if str(message.text[7:]) == str(f'sendall'):
			q.execute(f'SELECT user FROM list_bot WHERE bot = "{bot_name}"')
			bot_admin = q.fetchone()[0]
			if  message.chat.id == bot_admin:
				users_zadanie.append(message.chat.id)
				keyboard = types.InlineKeyboardMarkup()
				keyboard.add(types.InlineKeyboardButton(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∞',callback_data=f'–ó–∞–∫—Ä—ã—Ç—å '))
				msg = bot.send_message(message.chat.id, "‚úçÔ∏è<b>–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>",parse_mode='HTML')
				bot.register_next_step_handler(msg, sendall, msg.message_id)
			else:
				pass
		else:
			pass
		connection.close()

def sendall(message,idsms):
	if message.chat.id in users_zadanie:
		bot.delete_message(message.chat.id,message.message_id)
		bot.delete_message(message.chat.id,idsms)
		sends = 0
		erors = 0
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å',callback_data=f'–ó–∞–∫—Ä—ã—Ç—å '))
		msg = bot.send_message(message.chat.id, '''‚è≥ –ò–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∞...''', reply_markup=keyboard)
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		q.execute(f'SELECT * FROM ugc_users WHERE bot = "{bot_name}"')
		row = q.fetchall()
		for i in row:
			time.sleep(0.1)
			if message.content_type == 'text':
				try:
					bot.send_message(i[0], message.text ,entities = message.entities, reply_markup=keyboard)
					sends += 1
				except:
					erors += 1
			elif message.content_type == 'photo':
				try:
					
					bot.send_photo(i[0],message.photo[0].file_id, message.caption ,caption_entities = message.caption_entities, reply_markup=keyboard)
					sends += 1
				except:
					erors += 1
		bot.send_message(message.chat.id, f'''<b>üìà –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>:
<b>‚îú–î–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ:</b> <code>{sends}</code>
<b>‚îî–û—à–∏–±–∫–∏:</b> <code>{erors}</code>\n\n''',parse_mode='HTML', reply_markup=keyboard)
	else:
		bot.delete_message(message.chat.id,message.message_id)

@bot.message_handler(content_types=['text'])
def send_text(message):
	if message.chat.type == 'private':
		bot.delete_message(message.chat.id,message.message_id)
		try:
			bot.delete_message(message.chat.id,message.message_id - 1)
		except:
			pass
		hideBoard = types.ReplyKeyboardRemove()
		msg = bot.send_message(message.chat.id, f'''‚è≥ –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é.......''', reply_markup=hideBoard)
		bot.delete_message(message.chat.id,msg.message_id)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='üéõ –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é',callback_data=f'–º–µ–Ω—é '))
		bot.send_message(message.chat.id, '''‚ùóÔ∏è –í–Ω–∏–º–∞–Ω–∏–µ, –≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ, –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!''',parse_mode='HTML', reply_markup=keyboard)
	else:
		pass


def supportadd(message,msdids):
	if message.chat.id in users_zadanie:
		bot.delete_message(message.chat.id,message.message_id)
		bot.delete_message(message.chat.id, msdids)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–º–µ–Ω—é '))
		try:
			connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
			q = connection.cursor()
			q.execute("INSERT INTO support (user,text,status,bot) VALUES ('%s', '%s', '%s', '%s')"%(message.chat.id,message.text,'1',bot_name))
			connection.commit()
			connection.close()
			bot.send_message(message.chat.id, '''‚úîÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –≤ —Å–∫–æ—Ä–µ–º –≤—Ä–µ–º–µ–Ω–∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ.''', reply_markup=keyboard)
		except:
			bot.send_message(message.chat.id, f'''‚ùóÔ∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.''',parse_mode='HTML',reply_markup=keyboard)
	else:
		bot.delete_message(message.chat.id,message.message_id)


def order_status(order_id):
    connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
    q = connection.cursor()
    q.execute("SELECT api_partner FROM geral_config  where id = '1'")
    apinakrutka = q.fetchone()[0]
    connection.close()
    s = requests.Session()
    parameters = {
        'key': apinakrutka,
        'action': 'status',
        'order': order_id
    }
    h = s.post('https://partner.soc-proof.su/api/v2', params=parameters)
    return h.json()

def statuszakaz(message,msdids):
	if message.chat.id in users_zadanie:
		bot.delete_message(message.chat.id,message.message_id)
		bot.delete_message(message.chat.id, msdids)
		order = order_status(message.text)
		if order.get("error"):
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'–∑–∞–∫–∞–∑—ã'))
			bot.send_message(message.chat.id,f'''<b>‚ùóÔ∏è –ó–∞–∫–∞–∑–∞ —Å –¥–∞–Ω–Ω—ã–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:
‚îî–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>''',parse_mode="HTML", reply_markup=keyboard)
		else:
			print(order['status'])
			keyboard = types.InlineKeyboardMarkup()
			try:
				if order['status'] == 'Pending':
					status = "–û–∂–∏–¥–∞–Ω–∏–µ"

				if order['status'] == 'In progress':
					status = "–í —Ä–∞–±–æ—Ç–µ"

				if order['status'] == 'Processing':
					status = "–í –æ—á–µ—Ä–µ–¥–∏"

				if order['status'] == 'Completed':
					status = "–ó–∞–≤–µ—Ä—à—ë–Ω"

				if order['status'] == 'Canceled':
					keyboard.add(types.InlineKeyboardButton(text=f'''‚ùóÔ∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏''',url=f'https://telegra.ph/Informaciya-po-zakazam-01-25'))
					status = "–ó–∞–≤–µ—Ä—à—ë–Ω —Å –æ—à–∏–±–∫–æ–π"
					
				if order['status'] == 'Partial':
					keyboard.add(types.InlineKeyboardButton(text=f'''‚ùóÔ∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏''',url=f'https://telegra.ph/Informaciya-po-zakazam-01-25'))
					status = "–ó–∞–≤–µ—Ä—à—ë–Ω —Å –æ—à–∏–±–∫–æ–π"
			except:
				keyboard.add(types.InlineKeyboardButton(text=f'''‚ùóÔ∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏''',url=f'https://telegra.ph/Informaciya-po-zakazam-01-25'))
				status = "–ó–∞–≤–µ—Ä—à—ë–Ω —Å –æ—à–∏–±–∫–æ–π"
			keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'–º–µ–Ω—é'))
			bot.send_message(message.chat.id, f'''<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑—É:</b>
‚îú<b>ID –∑–∞–∫–∞–∑–∞:</b> <code>{message.text}</code>
‚îú<b>–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:</b> <code>{status}</code>
‚îî<b>–û—Å—Ç–∞–ª–æ—Å—å:</b> <code>{order['remains']}</code>''', parse_mode="HTML" ,reply_markup=keyboard)
	else:
		bot.delete_message(message.chat.id,message.message_id)

def generator_pw():
    pwd =  string.digits
    return "".join(random.choice(pwd) for x in range(random.randint(10, 16)))

def cupon_aktiv(message,msdids):
	if message.chat.id in users_zadanie:
		bot.delete_message(message.chat.id,message.message_id)
		bot.delete_message(message.chat.id, msdids)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'–ø—Ä–æ—Ñ–∏–ª—å '))
		try:
			connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
			q = connection.cursor()
			chat_id = f'{message.chat.id}'
			q.execute(f'SELECT * FROM cupon WHERE name = "{message.text}"')
			row = q.fetchone()
			if row != None:
				id_cupon = row[0]
				ostatok_cupon = row[3]
				summa_cupon = row[2]
				user_list = row[4].replace('\r', "").split('\n')
				if ostatok_cupon >= 1:
					if chat_id in user_list:
						bot.send_message(message.chat.id, f'üôÅ –ü—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –º—ã –Ω–µ –æ–¥–æ–±—Ä–∏–ª–∏ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.',parse_mode='HTML', reply_markup=keyboard)
					else:
						q.execute(f"update cupon set colvo = colvo - 1 where id = '{id_cupon}'")
						connection.commit()
						user_list = f'{row[4]}\n{chat_id}'
						q.execute(f"update cupon set user = '{user_list}' where id = '{id_cupon}'")
						connection.commit()
						q.execute(f"update ugc_users set balance = balance + '{summa_cupon}' where id = '{message.chat.id}' and bot = '{bot_name}'")
						connection.commit()
						connection.close()
						bot.send_message(message.chat.id, f'‚úîÔ∏è –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {summa_cupon} RUB',parse_mode='HTML', reply_markup=keyboard)
				else:
					connection.close()
					bot.send_message(message.chat.id, f'üôÅ –ü—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –º—ã –Ω–µ –æ–¥–æ–±—Ä–∏–ª–∏ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.',parse_mode='HTML', reply_markup=keyboard)
			else:
				connection.close()
				bot.send_message(message.chat.id, f'üôÅ –ü—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –º—ã –Ω–µ –æ–¥–æ–±—Ä–∏–ª–∏ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.',parse_mode='HTML', reply_markup=keyboard)
		except:
			connection.close()
			bot.send_message(message.chat.id, f'üôÅ –ü—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –º—ã –Ω–µ –æ–¥–æ–±—Ä–∏–ª–∏ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.',parse_mode='HTML', reply_markup=keyboard)
	else:
		bot.delete_message(message.chat.id,message.message_id)

def btc_oplata_2(message):
		try:
			if int(message.text) >= int(1):
				connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
				q = connection.cursor()
				key_pay = '08c92cac45de169773b42104f0f69ea2'
				id_payss = '1054'
				id_pay = generator_pw()
				awfawf = f"{message.text}|{id_pay}|{id_payss}|RUB|@{bot_name}:{message.chat.id}|{key_pay}"
				hash = hashlib.md5(awfawf.encode("utf-8")).hexdigest()
				url = f'https://payok.io/pay?amount={message.text}&payment={id_pay}&shop={id_payss}&desc=@{bot_name}:{message.chat.id}&sign={hash}'
				q.execute("INSERT INTO pay_ok (user,id_pay) VALUES ('%s', '%s')"%(message.chat.id,id_pay))
				connection.commit()
				keyboard = types.InlineKeyboardMarkup()
				keyboard.add(types.InlineKeyboardButton(text=f'''‚ÜóÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ ''',url=url))
				keyboard.add(types.InlineKeyboardButton(text=f'''ü¶ã–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂''',callback_data=f'check_opl2'))
				keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'–ø—Ä–æ—Ñ–∏–ª—å '))
				bot.send_message(message.chat.id, '''‚ùóÔ∏è –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ  –Ω–∏–∂–µ –∏ –æ–ø–ª–∞—Ç–∏—Ç–µ —Å—á–µ—Ç —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º !

üí° –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å.''', reply_markup=keyboard)
			else:
				keyboard = types.InlineKeyboardMarkup()
				keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'–ø—Ä–æ—Ñ–∏–ª—å '))
				bot.send_message(message.chat.id, f'‚ùóÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 10 RUB',parse_mode='HTML')
		except:
			bot.send_message(message.chat.id, f'‚ùóÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 10 RUB',parse_mode='HTML')

def btc_oplata_1(message):
	keyboard = types.InlineKeyboardMarkup()
	if message.text != 'üéõ –ú–µ–Ω—é':
		new_bill = p2p.bill(amount=int(message.text), lifetime=45)
		keyboard.add(types.InlineKeyboardButton(text='üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ',url=new_bill.pay_url))
		keyboard.add(types.InlineKeyboardButton(text='‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å',callback_data=f'Check_Depozit_qiwi_{new_bill.bill_id}'))
		bot.send_message(message.chat.id, '''‚ñ™Ô∏è –î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–∏ –∏–∑ –∫–Ω–æ–ø–∫–∏ –∏ —Å–æ–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É —Å—á–µ—Ç–∞ !
			
‚è∞ –°—Å—ã–ª–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞: 45 –º–∏–Ω—É—Ç''',parse_mode='HTML', reply_markup=keyboard)
	else:
		bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–∏–ª–∏',parse_mode='HTML', reply_markup=keyboard)

def newpokupka(message,msdids,tovar):
	if message.chat.id in users_zadanie:
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∞',callback_data=f'–ú–∞–≥–∞–∑–∏–Ω '))
		bot.delete_message(message.chat.id,message.message_id)
		bot.delete_message(message.chat.id, msdids)
		try:
			connection = connect(host=bd_host,user=bd_login,password=bd_pass,database='bot_shop')
			q = connection.cursor()
			keyboard = types.InlineKeyboardMarkup()
			q.execute(f"SELECT * FROM tovar WHERE id = '{tovar}'")
			rowss = q.fetchone()
			colvo_rovar = 0 
			with open (f'/root/smm/tovar/{rowss[5]}') as f: 
				for line in f: 
					if line != '\n': 
						colvo_rovar += 1
			if int(colvo_rovar) >= int(message.text):
				prace = int(message.text) * int(rowss[3])
				connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
				q = connection.cursor()
				q.execute(f"SELECT user FROM list_bot where bot = '{bot_name}'")
				users = q.fetchone()[0]
				q.execute(f"SELECT * FROM ugc_users where id = '{message.chat.id}' and bot = '{bot_name}'")
				balance = q.fetchone()[1]
				if int(prace) <= (balance):
					if colvo_rovar == int(message.text):
						connection = connect(host=bd_host,user=bd_login,password=bd_pass,database='bot_shop')
						q = connection.cursor()
						q.execute(f"DELETE FROM tovar where id = '{tovar}'")
						connection.commit()
						connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
						q = connection.cursor()
					prace_admin = int(prace) / 100 * 80
					tomorrow = datetime.now()
					data = tomorrow.strftime('%d/%m/%Y')
					q.execute("INSERT INTO list_zakaz_shop (user,tovar,colvo,prace,data,bot) VALUES ('%s', '%s', '%s', '%s', '%s', '%s')"%(message.chat.id,rowss[1],message.text,prace_admin,data,bot_name))
					connection.commit()
					q.execute(f"update list_bot set logi = '{data}' WHERE bot = '{bot_name}'")
					connection.commit()
					q.execute(f"update list_bot set balance = balance + '{prace_admin}' where bot = '{bot_name}'")
					connection.commit()
					q.execute(f"update list_bot set dohod = dohod + '{prace_admin}' where bot = '{bot_name}'")
					connection.commit()
					q.execute(f"update ugc_users set balance = balance - '{prace}' where id = '{message.chat.id}' and bot = '{bot_name}'")
					connection.commit()
					count = 0
					while count < int(message.text):
						f=open(f'/root/smm/tovar/{rowss[5]}',encoding='utf8').readlines()
						for i in [0]:
							tovar = f.pop(i)
							tovar = tovar.translate(dict.fromkeys(map(ord, whitespace)))
						doc = open(f'/root/smm/tovar/pokupki/{message.chat.id}_{bot_name}.txt', 'a',encoding='utf8')
						doc.write(f'{rowss[1]} -  {tovar} - {data}\n')
						doc.close()
						docs = open(f'/root/smm/tovar/pokupki/{message.chat.id}_Tovar.txt', 'a')
						docs.write(f'({count}) -  {tovar}\n')
						docs.close()
						with open(f'/root/smm/tovar/{rowss[5]}','w') as F:
							F.writelines(f)
						count += 1

					keyboard = types.InlineKeyboardMarkup()
					keyboard.add(types.InlineKeyboardButton(text='‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å',callback_data=f'–ó–∞–∫—Ä—ã—Ç—å '))	
					doc = open(f'/root/smm/tovar/pokupki/{message.chat.id}_Tovar.txt', 'rb')
					bot.send_document(message.chat.id, doc, caption='üóÇ –í–∞—à–∏ –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.',reply_markup=keyboard)
					try:
						bot.send_message(users, f'''<b>–ù–æ–≤—ã–π –ø–æ–∫—É–ø–∫–∞:</b> <code>{rowss[1]}</code> <b>| –î–æ—Ö–æ–¥:</b> <code>{prace_admin}</code> <b>RUB</b>''',parse_mode='HTML',reply_markup=keyboard)
					except:
						pass
					doc.close()
					path = os.path.join('/root/smm/tovar/pokupki/', f'{message.chat.id}_Tovar.txt')
					os.remove(path)
					keyboard = types.InlineKeyboardMarkup()
					keyboard.add(types.InlineKeyboardButton(text='üíå –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üíå',callback_data=f'–û—Å—Ç–∞–≤–∏—Ç—å–æ—Ç–∑—ã–≤ '))
					keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—Å—è –≤ –º–µ–Ω—é',callback_data=f'–º–µ–Ω—é '))
					connection.close()
					bot.send_message(message.chat.id, f'''<b>‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å: </b>
‚îî<i>–ù–∞–º –±—ã–ª–æ –±—ã–ª–æ –±—ã –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, –µ—Å–ª–∏ –±—ã –≤—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤!</i>''',parse_mode='HTML',reply_markup=keyboard)
				else:
					connection.close()
					keyboard = types.InlineKeyboardMarkup()
					keyboard.add(types.InlineKeyboardButton(text='üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å',callback_data=f'–ø—Ä–æ—Ñ–∏–ª—å '))
					keyboard.add(types.InlineKeyboardButton(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∞',callback_data=f'–ú–∞–≥–∞–∑–∏–Ω '))
					bot.send_message(message.chat.id, f'''<b>‚ùóÔ∏è –û—à–∏–±–∫–∞: –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–æ {prace} RUB.</b>''' ,parse_mode='HTML',reply_markup=keyboard)
			else:
				connection.close()
				msg = bot.send_message(message.chat.id, f'''<b>‚ùóÔ∏è –û—à–∏–±–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –æ—Å—Ç–∞—Ç–æ–∫ {colvo_rovar} —à—Ç.
‚îî–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:</b>''',parse_mode='HTML',reply_markup=keyboard)
				bot.register_next_step_handler(msg, newpokupka, msg.message_id,tovar)

		except:
			msg = bot.send_message(message.chat.id, f'''<b>‚ùóÔ∏è –û—à–∏–±–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –≤–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.
‚îî–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:</b>''',parse_mode='HTML',reply_markup=keyboard)
			bot.register_next_step_handler(msg, newpokupka, msg.message_id,tovar)
	else:
		bot.delete_message(message.chat.id,message.message_id)

def newzakaz(message,msdids):
	if message.chat.id in users_zadanie:
		try:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∞',callback_data=f'–ù–∞–∫—Ä—É—Ç–∫–∞ '))
			bot.delete_message(message.chat.id,message.message_id)
			bot.delete_message(message.chat.id, msdids)
			colvozakaz = message.text
			connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
			q = connection.cursor()
			q.execute(f"update ugc_users set colvo = '{colvozakaz}' where id = '{message.chat.id}' and bot = '{bot_name}'")
			connection.commit()
			q.execute(f"SELECT * FROM ugc_users where id = '{message.chat.id}' and bot = '{bot_name}'")
			uslugaqid = q.fetchone()
			q.execute(f"SELECT * FROM item where item_id = '{uslugaqid[4]}'")
			rowsss = q.fetchone()
			if int(message.text) >= int(rowsss[4]):
				if int(message.text) <= int(rowsss[5]):
					q.execute(f"SELECT prace FROM list_bot where bot = '{bot_name}'")
					plusprace = q.fetchone()[0]
					praces = float(rowsss[3]) / 1000
					praces2 = float(praces) * float(message.text)
					praces5 = float(rowsss[3]) / 100 * float(plusprace)
					pracesspracess = float(praces2) + float(praces5)
					if float(uslugaqid[4]) >= float(pracesspracess):
						msg = bot.send_message(message.chat.id, f'''<b>üìÑ –í—ã –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> <code>{colvozakaz} —à—Ç</code> 
<b>‚îú–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>{pracesspracess}</code> <b>RUB</b>
<b>‚îî–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É:</b>''' ,parse_mode='HTML',reply_markup=keyboard)
						bot.register_next_step_handler(msg, newzakaz1 , msg.message_id)
					else:
						connection.close()
						keyboard = types.InlineKeyboardMarkup()
						keyboard.add(types.InlineKeyboardButton(text='üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å',callback_data=f'–ø—Ä–æ—Ñ–∏–ª—å '))
						keyboard.add(types.InlineKeyboardButton(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∞',callback_data=f'–ù–∞–∫—Ä—É—Ç–∫–∞ '))
						bot.send_message(message.chat.id, f'''<b>‚ùóÔ∏è –û—à–∏–±–∫–∞: –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–æ {pracesspracess} RUB.</b>''' ,parse_mode='HTML',reply_markup=keyboard)
				else:
					connection.close()
					msg = bot.send_message(message.chat.id, f'''<b>‚ùóÔ∏è –û—à–∏–±–∫–∞: <code>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {rowsss[5]} —à—Ç</code>
‚îî–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:</b>''' ,parse_mode='HTML',reply_markup=keyboard)
					bot.register_next_step_handler(msg, newzakaz, msg.message_id)
			else:
				connection.close()
				msg = bot.send_message(message.chat.id, f'''<b>‚ùóÔ∏è –û—à–∏–±–∫–∞: <code>–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ {rowsss[4]} —à—Ç</code>
‚îî–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:</b>''' ,parse_mode='HTML',reply_markup=keyboard)
				bot.register_next_step_handler(msg, newzakaz, msg.message_id)
		except Exception as e:
			print(e)
			msg = bot.send_message(message.chat.id, f'''<b>‚ùóÔ∏è –û—à–∏–±–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –≤–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.
‚îî–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:</b>''',parse_mode='HTML',reply_markup=keyboard)
			bot.register_next_step_handler(msg, newzakaz, msg.message_id)
	else:
		bot.delete_message(message.chat.id,message.message_id)

def newzakaz1(message, msdids):
	if message.chat.id in users_zadanie:
		try:
			bot.delete_message(message.chat.id,message.message_id)
			bot.delete_message(message.chat.id, msdids)
			connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
			q = connection.cursor()
			q.execute(f"update ugc_users set link = '{message.text}' where id = '{message.chat.id}' and bot = '{bot_name}'")
			connection.commit()
			q.execute(f"SELECT * FROM ugc_users where id = '{message.chat.id}' and bot = '{bot_name}'")
			uslugaqid = q.fetchone()
			q.execute(f"SELECT * FROM item where item_id = '{uslugaqid[4]}'")
			rowsss = q.fetchone()
			q.execute(f"SELECT prace FROM list_bot where bot = '{bot_name}'")
			plusprace = q.fetchone()[0]
			pracess = Decimal(rowsss[5]) / 100 * Decimal(plusprace)
			praces = Decimal(rowsss[5]) + Decimal(pracess)
			pracesspracess = Decimal(praces) / 1000 * Decimal(uslugaqid[4])
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'''‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å''',callback_data='–ó–∞–∫–∞–∑–∞—Ç—å'),types.InlineKeyboardButton(text=f'''üö´ –û—Ç–º–µ–Ω–∏—Ç—å''',callback_data='–º–µ–Ω—é '))
			bot.send_message(message.chat.id, f'''<b>‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
<b>‚îú–£—Å–ª—É–≥–∞:</b> <code>{rowsss[0]}</code> 
<b>‚îú–°—Å—ã–ª–∫–∞:</b> <code>{message.text}</code> 
<b>‚îî–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> <code>{uslugaqid[12]} —à—Ç</code> ''' ,parse_mode='HTML',reply_markup=keyboard)
			connection.close()
		except:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∞',callback_data=f'–ù–∞–∫—Ä—É—Ç–∫–∞ '))
			bot.send_message(message.chat.id, f'''<b>‚úñÔ∏è –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>''',parse_mode='HTML',reply_markup=keyboard)
	else:
		bot.delete_message(message.chat.id,message.message_id)		

def reviews(message, msdids):
	if message.chat.id in users_zadanie:
		bot.delete_message(message.chat.id, msdids)
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		date = datetime.today()
		q.execute("INSERT INTO reviews (user,text,data,bot) VALUES ('%s', '%s', '%s', '%s')"%(message.from_user.username,message.text,date,bot_name))
		connection.commit()
		connection.close()
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='üéõ –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é',callback_data=f'–º–µ–Ω—é '))
		bot.send_message(message.chat.id, '''<b> ‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤, –Ω–∞–º –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ.</b>''',parse_mode='HTML', reply_markup=keyboard)
	else:
		bot.delete_message(message.chat.id,message.message_id)

def users_zadanie_del(user):
	if user in users_zadanie:
		users_zadanie.remove(user)
	else:
		pass


@bot.callback_query_handler(func=lambda call:True)
def podcategors(call):
	a = call.data.split()
	if a[0] == 'Check_Depozit_qiwi_':
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		try:
			if p2p.check(bill_id=call.data[19:]).status == "PAID":
				bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
				q.execute(f"update ugc_users set balance = balance + '{p2p.check(bill_id=call.data[19:]).amount}' where id = '{call.message.chat.id}' and bot = '{bot_name}'")
				connection.commit()
				bot.send_message(call.message.chat.id, f"‚úîÔ∏è –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {p2p.check(bill_id=call.data[19:]).amount} RUB!",parse_mode='HTML')
			else:
				bot.answer_callback_query(callback_query_id=call.id, show_alert=True, text="‚ö† –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
		except Exception as e:
			print(e)
			pass
			
	if a[0] == '–º–µ–Ω—é':
		users_zadanie_del(call.message.chat.id)
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		q.execute(f'SELECT * FROM list_bot WHERE bot = "{bot_name}"')
		bot_deposit = q.fetchone()
		if int(bot_deposit[11]) >= 1000:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'''üìà –ù–∞–∫—Ä—É—Ç–∫–∞''',callback_data='–ù–∞–∫—Ä—É—Ç–∫–∞'),types.InlineKeyboardButton(text=f'''üì© –ü—Ä–∏—ë–º SMS''',callback_data='–ü—Ä–∏–µ–º'))
			keyboard.add(types.InlineKeyboardButton(text=f'''üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å''',callback_data='–ø—Ä–æ—Ñ–∏–ª—å'),types.InlineKeyboardButton(text=f'''üë® –ü–æ–¥–¥–µ—Ä–∂–∫–∞''',callback_data='–ü–æ–¥–¥–µ—Ä–∂–∫–∞'))
			keyboard.add(types.InlineKeyboardButton(text=f'''‚öôÔ∏è –ú–æ–∏ –∑–∞–∫–∞–∑—ã''',callback_data='–∑–∞–∫–∞–∑—ã'),types.InlineKeyboardButton(text=f'''üì¶ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏''',callback_data='–ø–æ–∫—É–ø–∫–∏'))
			connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
			q = connection.cursor()
			q.execute(f"SELECT * FROM keyboards WHERE bot = '{bot_name}'")
			rows = q.fetchall()
			connection.close()
			for i in rows:
				keyboard.add(types.InlineKeyboardButton(text=i[1],callback_data=i[0]))
			bot.send_message(call.message.chat.id, f'''–ü—Ä–∏–≤–µ—Ç <a href="tg://user?id={call.message.chat.id}">{call.message.chat.first_name}</a> üëã
–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é, —á—Ç–æ–±—ã —Å–æ –º–Ω–æ–π –æ–±—â–∞—Ç—å—Å—è üí¨''',parse_mode='HTML', reply_markup=keyboard)
		else:
			if int(bot_deposit[13]) != 0: 
				keyboard = types.InlineKeyboardMarkup()
				keyboard.add(types.InlineKeyboardButton(text=f'''üìà –ù–∞–∫—Ä—É—Ç–∫–∞''',callback_data='–ù–∞–∫—Ä—É—Ç–∫–∞'),types.InlineKeyboardButton(text=f'''üì© –ü—Ä–∏—ë–º SMS''',callback_data='–ü—Ä–∏–µ–º'))
				keyboard.add(types.InlineKeyboardButton(text=f'''üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å''',callback_data='–ø—Ä–æ—Ñ–∏–ª—å'),types.InlineKeyboardButton(text=f'''üë® –ü–æ–¥–¥–µ—Ä–∂–∫–∞''',callback_data='–ü–æ–¥–¥–µ—Ä–∂–∫–∞'))
				connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
				q = connection.cursor()
				q.execute(f"SELECT * FROM keyboards WHERE bot = '{bot_name}'")
				rows = q.fetchall()
				connection.close()
				for i in rows:
					keyboard.add(types.InlineKeyboardButton(text=i[1],callback_data=i[0]))
				bot.send_message(call.message.chat.id, f'''–ü—Ä–∏–≤–µ—Ç <a href="tg://user?id={call.message.chat.id}">{call.message.chat.first_name}</a> üëã
–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é, —á—Ç–æ–±—ã —Å–æ –º–Ω–æ–π –æ–±—â–∞—Ç—å—Å—è üí¨''',parse_mode='HTML', reply_markup=keyboard)
			else:
				keyboard = types.InlineKeyboardMarkup()
				keyboard.add(types.InlineKeyboardButton(text=f'''‚ö°Ô∏è –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ''',callback_data='–ù–∞–∫—Ä—É—Ç–∫–∞'),types.InlineKeyboardButton(text=f'''‚öôÔ∏è –ú–æ–∏ –∑–∞–∫–∞–∑—ã''',callback_data='–∑–∞–∫–∞–∑—ã'))
				keyboard.add(types.InlineKeyboardButton(text=f'''üí≥ –ü—Ä–æ—Ñ–∏–ª—å''',callback_data='–ø—Ä–æ—Ñ–∏–ª—å'),types.InlineKeyboardButton(text=f'''üë® –ü–æ–¥–¥–µ—Ä–∂–∫–∞''',callback_data='–ü–æ–¥–¥–µ—Ä–∂–∫–∞'))
				connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
				q = connection.cursor()
				q.execute(f"SELECT * FROM keyboards WHERE bot = '{bot_name}'")
				rows = q.fetchall()
				connection.close()
				for i in rows:
					keyboard.add(types.InlineKeyboardButton(text=i[1],callback_data=i[0]))
				bot.send_message(call.message.chat.id, f'''–ü—Ä–∏–≤–µ—Ç <a href="tg://user?id={call.message.chat.id}">{call.message.chat.first_name}</a> üëã
–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é, —á—Ç–æ–±—ã —Å–æ –º–Ω–æ–π –æ–±—â–∞—Ç—å—Å—è üí¨''',parse_mode='HTML', reply_markup=keyboard)

	if a[0] == 'check_opl':
		name = 'jopa'
		secret = '7a4ca73baf7bcb4f042d59c14e893ba158155fde'
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		q.execute(f"SELECT id_pay FROM pay_ok where user = '{call.message.chat.id}' ORDER BY id DESC LIMIT 1")
		zalupa = q.fetchone()[0]
		try:
			url = urllib.request.urlopen(f'https://api.crystalpay.ru/v1/?s={secret}&n={name}&o=receipt-check&i={zalupa}').read()
			result = json.loads(url.decode('utf8'))
			summ = (result['state'])
			summa = (result['payamount'])
			if summ == "payed":
				q.execute(f"update ugc_users set balance = balance + '{summa}' where id = '{call.message.chat.id}'")
				connection.commit()
				q.execute(f"update pay_ok set id_pay = 'paued' where user = '{call.message.chat.id}' ORDER BY id DESC LIMIT 1")
				connection.commit()
				bot.send_message(call.message.chat.id, f'–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {summa} RUB')
			else: 
				bot.send_message(call.message.chat.id, '–í—ã –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏')
		except:
			bot.send_message(call.message.chat.id, f'<b>–í—ã –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏</b>', parse_mode='HTML')

	if a[0] == 'check_opl2':
		api_key = 'F9F332866876657CF1CEF31E57F7E5DC-DBE2A835B23C5C1B965647C16C7DF76A-2188E143B43F3FC90765E400188BCE13'
		id_pays = '380'
		magaz = '1054'
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		q.execute(f"SELECT id_pay FROM pay_ok where user = '{call.message.chat.id}' ORDER BY id DESC LIMIT 1")
		zalupa = q.fetchone()[0]
		try:
			url2 = requests.post(url='https://payok.io/api/transaction', data={'API_ID': id_pays, 'API_KEY': api_key, 'shop': magaz, 'payment': zalupa,})
			response_data = url2.json()
			summ = (response_data['status'])
			stat = (response_data['1'])
			result2 = stat.get('amount_profit')
			if summ == "success":
				q.execute(f"update ugc_users set balance = balance + '{result2}' where id = '{call.message.chat.id}'")
				connection.commit()
				q.execute(f"update pay_ok set id_pay = 'paued' where user = '{call.message.chat.id}' ORDER BY id DESC LIMIT 1")
				connection.commit()
				bot.send_message(call.message.chat.id, f'–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:  <b>{result2}</b> RUB',parse_mode='HTML')
			else: 
				bot.send_message(call.message.chat.id, '<b>–û—à–∏–±–∫–∞</b>',parse_mode='HTML')
		except:
			bot.send_message(call.message.chat.id, f'<b>–í—ã –µ—â–µ –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏</b>', parse_mode='HTML')
	
	elif a[0] == '–ú–∞–≥–∞–∑–∏–Ω':
		users_zadanie_del(call.message.chat.id)
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database='bot_shop')
		q = connection.cursor()
		keyboard = types.InlineKeyboardMarkup()
		q.execute(f"SELECT * FROM categor WHERE bot = '{bot_name}'")
		rows = q.fetchall()
		connection.close()
		if len(rows) != 0:
			for i in rows:
				keyboard.add(types.InlineKeyboardButton(text=i[1],callback_data=f'–¢–æ–≤–∞—Ä—ã {i[0]}'))
			keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é''',callback_data='–º–µ–Ω—é'))
			bot.send_message(call.message.chat.id,'''<b>üõç –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>''', reply_markup=keyboard, parse_mode='HTML')
		else:
			keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data='–º–µ–Ω—é'))
			bot.send_message(call.message.chat.id,'''<b>üòï –ö –±–æ–ª—å—à–æ–º—É —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã.</b>''', reply_markup=keyboard, parse_mode='HTML')

	elif a[0] == '–¢–æ–≤–∞—Ä—ã':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database='bot_shop')
		q = connection.cursor()
		keyboard = types.InlineKeyboardMarkup()
		q.execute(f"SELECT * FROM tovar WHERE categor = '{a[1]}' and status = 'DONE'")
		rows = q.fetchall()
		connection.close()
		if len(rows) != 0:
			for i in rows:
				keyboard.add(types.InlineKeyboardButton(text=i[1],callback_data=f'–¢–æ–≤–∞—Ä {i[0]}'))
			keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data='–ú–∞–≥–∞–∑–∏–Ω'))
			bot.send_message(call.message.chat.id,'''<b>üõç –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:</b>''', reply_markup=keyboard, parse_mode='HTML')
		else:
			keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data='–ú–∞–≥–∞–∑–∏–Ω'))
			bot.send_message(call.message.chat.id,'''<b>üòï –ö –±–æ–ª—å—à–æ–º—É —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –ø–æ–∫–∞ —á—Ç–æ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã.</b>''', reply_markup=keyboard, parse_mode='HTML')

	elif a[0] == '–¢–æ–≤–∞—Ä':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database='bot_shop')
		q = connection.cursor()
		keyboard = types.InlineKeyboardMarkup()
		q.execute(f"SELECT * FROM tovar WHERE id = '{a[1]}'")
		rows = q.fetchone()
		connection.close()
		colvo_rovar = 0 
		with open (f'/root/smm/tovar/{rows[5]}') as f: 
			for line in f: 
				if line != '\n': 
					colvo_rovar += 1
		keyboard.add(types.InlineKeyboardButton(text='üõí –ö—É–ø–∏—Ç—å',callback_data=f'–ö—É–ø–∏—Ç—å {rows[0]}'))
		keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data=f'–¢–æ–≤–∞—Ä—ã {rows[4]}'))
		bot.send_message(call.message.chat.id,f'''<b>üì¶ –¢–æ–≤–∞—Ä:</b> {rows[1]}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
<b>üìú –û–ø–∏—Å–∞–Ω–∏–µ:</b>
<code>{rows[2]}</code>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
<b>üóÇ –û—Å—Ç–∞—Ç–æ–∫: {colvo_rovar} —à—Ç</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
<b>üí≥ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É:</b>  <code>{rows[3]}</code> <b>RUB</b>''', reply_markup=keyboard, parse_mode='HTML')
		
	elif a[0] == '–ö—É–ø–∏—Ç—å':
		users_zadanie.append(call.message.chat.id)
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database='bot_shop')
		q = connection.cursor()
		q.execute(f"SELECT * FROM tovar WHERE id = '{a[1]}'")
		rows = q.fetchone()
		connection.close()
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∞',callback_data=f'–ú–∞–≥–∞–∑–∏–Ω '))
		msg = bot.send_message(call.message.chat.id, f'''<b>üìÑ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–æ–≤–∞—Ä: <code>{rows[1]}</code>
‚îî–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:</b> ''',parse_mode='HTML', reply_markup=keyboard)
		bot.register_next_step_handler(msg, newpokupka, msg.message_id,a[1])
			
	elif a[0] == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'''üìù –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å''',callback_data='–ó–∞–¥–∞—Ç—å–≤–æ–ø—Ä–æ—Å'),types.InlineKeyboardButton(text=f'''üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞''',callback_data='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å'))
		keyboard.add(types.InlineKeyboardButton(text=f'''‚¨ÖÔ∏è –ù–∞–∑–∞–¥''',callback_data='–º–µ–Ω—é'))
		bot.send_message(call.message.chat.id, f'''‚ö°Ô∏è –ï—Å–ª–∏ —É –í–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å¬ª.

–ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–µ —Å –∑–∞–∫–∞–∑–æ–º, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞¬ª –∏ –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.''',parse_mode='HTML', reply_markup=keyboard)
	elif a[0] == '–ó–∞–¥–∞—Ç—å–≤–æ–ø—Ä–æ—Å':	
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		keyboard = types.InlineKeyboardMarkup()
		users_zadanie.append(call.message.chat.id)
		keyboard.add(types.InlineKeyboardButton(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∞',callback_data=f'–º–µ–Ω—é '))
		msg = bot.send_message(call.message.chat.id,'''‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:''', reply_markup=keyboard, parse_mode='HTML')
		bot.register_next_step_handler(msg, supportadd, msg.message_id)
	
	elif a[0] == '–ó–∞–∫—Ä—ã—Ç—å':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)

	elif a[0] == '–ø—Ä–æ—Ñ–∏–ª—å':
		users_zadanie_del(call.message.chat.id)
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		q.execute(f'SELECT * FROM ugc_users WHERE id = "{call.message.chat.id}" and bot = "{bot_name}"')
		row = q.fetchone()
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å',callback_data=f'awhat_oplata'),types.InlineKeyboardButton(text='üéÅ –ü—Ä–æ–º–æ–∫–æ–¥',callback_data='–ü—Ä–æ–º–æ–∫–æ–¥ '))
		keyboard.add(types.InlineKeyboardButton(text='üë§ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞',callback_data='ref'))
		keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data='–º–µ–Ω—é '))
		bot.send_message(call.message.chat.id, f'''<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å:
‚îúId:</b> <code>{call.message.chat.id}</code>
<b>‚îî–ë–∞–ª–∞–Ω—Å:</b> <code>{row[6]} RUB</code>

	''',parse_mode='HTML', reply_markup=keyboard)


	elif a[0] == '–ü—Ä–æ–º–æ–∫–æ–¥':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		keyboard = types.InlineKeyboardMarkup()
		users_zadanie.append(call.message.chat.id)
		keyboard.add(types.InlineKeyboardButton(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∞',callback_data=f'–ø—Ä–æ—Ñ–∏–ª—å '))
		msg = bot.send_message(call.message.chat.id,'''‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –∫—É–ø–æ–Ω–∞:''', reply_markup=keyboard, parse_mode='HTML')
		bot.register_next_step_handler(msg, cupon_aktiv, msg.message_id)
	
	elif a[0] == '–ü—Ä–∏–µ–º':
		users_zadanie_del(call.message.chat.id)
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		q.execute(f"SELECT api_sms FROM geral_config where id = '1'")
		api_sms = q.fetchone()
		headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}
		h = requests.post(f'https://smshub.org/stubs/handler_api.php?api_key={api_sms[0]}&action=getPrices&country=0', headers=headers).json()
		keyboard = types.InlineKeyboardMarkup()
		q.execute(f"SELECT * FROM service_list")
		rows = q.fetchall()
		btns = []
		for i in range(len(rows)):
			try:
				colvo = str(h['0'][rows[i][1]]).split("': ")[1].split("}")[0]
			except:
				colvo = 0
			btns.append(types.InlineKeyboardButton(text=f'[{colvo}] {rows[i][2]}', callback_data=f'vibor_sms {rows[i][0]}'))
		while btns != []:
			try:
				keyboard.add(
					btns[0],
					btns[1]
					)
				del btns[1], btns[0]
			except:
				keyboard.add(btns[0])
				del btns[0]
		status = is_subscribed(call.message.chat.id)
		if status == True:
			connection.close()
			keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', callback_data=f'–º–µ–Ω—é '))
			bot.send_message(call.message.chat.id, f'''<b>üì© –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞—Ä–µ–Ω–¥—ã –Ω–æ–º–µ—Ä–∞:</b>
‚îú<i>–°—Ç—Ä–∞–Ω–∞: –†–æ—Å—Å–∏—è üá∑üá∫</i>
‚îî<i>–¶–∏—Ñ—Ä–∞ –ø–µ—Ä–µ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º —Å–µ—Ä–≤–∏—Å–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç!</i>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
<b>‚ùóÔ∏è –ü–æ–∫—É–ø–∞—è –Ω–æ–º–µ—Ä –≤—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ —Å–º—Å –≤ –ø–µ—Ä–≤—ã–µ 20 –º–∏–Ω—É—Ç!</b>''',parse_mode='HTML', reply_markup=keyboard)
		else:
			q.execute(f'SELECT chanel_id FROM chanel WHERE bot = "{bot_name}"')
			row = q.fetchone()
			connection.close()
			invite_link =  bot_create.create_chat_invite_link(chat_id = row[0], member_limit = 1).invite_link
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text='‚ÜóÔ∏è –í—Å—Ç—É–ø–∏—Ç—å', url= invite_link))
			keyboard.add(types.InlineKeyboardButton(text='‚ôªÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data='–ù–∞–∫—Ä—É—Ç–∫–∞ '))
			bot.send_message(call.message.chat.id, f'''<b>‚ùóÔ∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–∞—à –∫–∞–Ω–∞–ª:</b>
<b>‚îî–°—Å—ã–ª–∫–∞:</b> <a href="{invite_link}">{invite_link}</a>''',parse_mode='HTML', reply_markup=keyboard,disable_web_page_preview = True)

	elif a[0] == 'vibor_sms':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		q.execute(f"SELECT api_sms FROM geral_config where id = '1'")
		api_sms = q.fetchone()

		q.execute(f"SELECT sms FROM list_bot where bot = '{bot_name}'")
		praceplus = q.fetchone()
		headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}
		h = requests.post(f'https://smshub.org/stubs/handler_api.php?api_key={api_sms[0]}&action=getPrices&country=0', headers=headers).json()
		q.execute(f'SELECT * FROM service_list WHERE id = "{a[1]}"')
		sms_info = q.fetchone()
		try:
			colvo = str(h['0'][sms_info[1]]).split("': ")[1].split("}")[0]
		except:
			colvo = 0
		praces = int(sms_info[3]) + int(praceplus[0])
		keyboard = types.InlineKeyboardMarkup()
		if int(colvo) != 0:
			keyboard.add(types.InlineKeyboardButton(text='üì≤ –ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å', callback_data=f'–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å {a[1]}'))
		keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'–ü—Ä–∏–µ–º '))
		bot.send_message(call.message.chat.id, f'''
<b>üì© –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚îú<b>–°–µ—Ä–≤–∏—Å:</b> <code>{sms_info[2]}</code>
‚îú<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> <code>{praces} RUB</code>
‚îî<b>–ù–æ–º–µ—Ä–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ:</b> <code>{colvo} —à—Ç</code>
''',parse_mode='HTML', reply_markup=keyboard)

	elif a[0] == '–ê—Ä–µ–Ω–¥–æ–≤–∞—Ç—å':
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		q.execute(f"SELECT sms FROM list_bot where bot = '{bot_name}'")
		praceplus = q.fetchone()
		q.execute(f"SELECT api_sms FROM geral_config where id = '1'")
		api_sms = q.fetchone()
		q.execute(f"SELECT balance FROM ugc_users where id = '{call.message.chat.id}' and bot = '{bot_name}'")
		balance = q.fetchone()
		q.execute(f'SELECT * FROM service_list WHERE id = "{a[1]}"')
		sms_info = q.fetchone()
		praces = int(sms_info[3]) + int(praceplus[0])
		if int(balance[0]) >= int(praces):
			headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}
			h = requests.post(f'https://smshub.org/stubs/handler_api.php?api_key={api_sms[0]}&action=getNumber&service={sms_info[1]}', headers=headers)
			if str(h.text) != 'BAD_SERVICE' and str(h.text) != 'NO_NUMBERS' and str(h.text) != 'NO_BALANCE':
				number = h.text.split("ACCESS_NUMBER:")[1].split(":")[1]
				id_number = h.text.split("ACCESS_NUMBER:")[1].split(":")[0]
				q.execute(f"update ugc_users set balance = balance - '{praces}' where id = '{call.message.chat.id}' and bot = '{bot_name}'")
				connection.commit()
				data = datetime.now()
				q.execute("INSERT INTO list_aktiv (user,bot,number,id_number,service,data,code,status) VALUES ('%s','%s', '%s','%s', '%s', '%s', '%s', '%s')"%(call.message.chat.id,bot_name,number,id_number,sms_info[2],data,'–ù–µ—Ç','wait'))
				connection.commit()
				keyboard = types.InlineKeyboardMarkup()
				keyboard.add(types.InlineKeyboardButton(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'–û—Ç–º–µ–Ω–∏—Ç—å—Å–º—Å {id_number}'))
				bot.send_message(call.message.chat.id, f'''
<b>üí≠ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚îú<b>–°–µ—Ä–≤–∏—Å:</b> <code>{sms_info[2]}</code>
‚îú<b>–ù–æ–º–µ—Ä:</b> <code>{number}</code>
‚îú<b>–°—Ç–∞—Ç—É—Å:</b> <code>–û–∂–∏–¥–∞–µ–º –∫–æ–¥, –º—ã –æ–ø–æ–≤–µ—Å—Ç–∏–º –∫–æ–≥–¥–∞ –æ–Ω –ø—Ä–∏–¥–µ—Ç. </code>
‚îú<b>–î–∞—Ç–∞:</b> <code>{data}</code>
‚îî<i>–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –∫–æ–¥ –Ω–µ –ø—Ä–∏–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 20 –º–∏–Ω—É—Ç, –≤–∞–º –≤–µ—Ä–Ω—É—Ç—Å—è –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å.</i>
''',parse_mode='HTML', reply_markup=keyboard)
			else:
				bot.answer_callback_query(callback_query_id=call.id,show_alert=True, text="üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")	
		else:
			bot.answer_callback_query(callback_query_id=call.id,show_alert=True, text="‚ùóÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.")
	
	elif a[0] == '–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ—Å–º—Å':
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		q.execute(f"SELECT api_sms FROM geral_config where id = '1'")
		api_sms = q.fetchone()
		headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}
		h = requests.post(f'https://smshub.org/stubs/handler_api.php?api_key={api_sms[0]}&action=setStatus&status=3&id={a[1]}', headers=headers)
		if str(h.text) == 'ACCESS_RETRY_GET':
			q.execute(f"update list_aktiv set status = 'WAIT' where id_number = '{a[1]}'")
			connection.commit()
			bot.answer_callback_query(callback_query_id=call.id,show_alert=True, text="‚è≥ –•–æ—Ä–æ—à–æ, –æ–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–µ —Å–º—Å.....")
			bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		else:
			q.execute(f"update list_aktiv set status = 'STATUS_CANCEL' where id_number = '{a[1]}'")
			connection.commit()
			bot.answer_callback_query(callback_query_id=call.id,show_alert=True, text="üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Ä–µ–º—è –∞—Ä–µ–Ω–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å.")	
			bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
	
	elif a[0] == '–ó–∞–≤–µ—Ä—à–∏—Ç—å—Å–º—Å':
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		q.execute(f"SELECT api_sms FROM geral_config where id = '1'")
		api_sms = q.fetchone()
		headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}
		h = requests.post(f'https://smshub.org/stubs/handler_api.php?api_key={api_sms[0]}&action=setStatus&status=6&id={a[1]}', headers=headers)
		print(h.text)
		if str(h.text) == 'ACCESS_ACTIVATION':
			q.execute(f"update list_aktiv set status = 'DONE' where id_number = '{a[1]}'")
			connection.commit()
			bot.answer_callback_query(callback_query_id=call.id,show_alert=True, text="‚úîÔ∏è –†–∞–±–æ—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
			bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		else:
			q.execute(f"update list_aktiv set status = 'DONE' where id_number = '{a[1]}'")
			connection.commit()
			bot.answer_callback_query(callback_query_id=call.id,show_alert=True, text="‚úîÔ∏è –†–∞–±–æ—Ç–∞ —Å –Ω–æ–º–µ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")	
			bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)


	elif a[0] == '–û—Ç–º–µ–Ω–∏—Ç—å—Å–º—Å':
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		q.execute(f"SELECT sms FROM list_bot where bot = '{bot_name}'")
		praceplus = q.fetchone()
		q.execute(f"SELECT api_sms FROM geral_config where id = '1'")
		api_sms = q.fetchone()
		q.execute(f'SELECT * FROM list_aktiv WHERE id_number = "{a[1]}"')
		info = q.fetchone()
		headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}
		h = requests.post(f'https://smshub.org/stubs/handler_api.php?api_key={api_sms[0]}&action=setStatus&status=8&id={a[1]}', headers=headers)
		if str(h.text) == 'ACCESS_CANCEL':
			q.execute(f"update list_aktiv set status = 'STATUS_CANCEL' where id_number = '{a[1]}'")
			connection.commit()
			bot.answer_callback_query(callback_query_id=call.id,show_alert=True, text="‚úîÔ∏è –û—Ç–º–µ–Ω–∏–ª–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—é, —Å—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—à–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å –≤ —Ç–µ—á–µ–Ω–∏–π –º–∏–Ω—É—Ç—ã")
			bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		else:
			q.execute(f"update list_aktiv set status = 'DONE' where id_number = '{a[1]}'")
			connection.commit()
			bot.answer_callback_query(callback_query_id=call.id,show_alert=True, text="‚úñÔ∏è –û—à–∏–±–∫–∞, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–æ–¥ –∏–ª–∏ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏—Å—Ç–µ–∫–ª–æ.")
			bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)

	elif a[0] == '–ù–∞–∫—Ä—É—Ç–∫–∞':
		users_zadanie_del(call.message.chat.id)
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		keyboard = types.InlineKeyboardMarkup()
		q.execute(f"SELECT * FROM category")
		rows = q.fetchall()
		btns = []
		for i in range(len(rows)):
			btns.append(types.InlineKeyboardButton(text=rows[i][0], callback_data=f'sub_category_ {rows[i][1]}'))
		while btns != []:
			try:
				keyboard.add(
					btns[0],
					btns[1]
					)
				del btns[1], btns[0]
			except:
				keyboard.add(btns[0])
				del btns[0]
		status = is_subscribed(call.message.chat.id)
		if status == True:
			connection.close()
			keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', callback_data=f'–º–µ–Ω—é '))
			bot.send_message(call.message.chat.id, f'''<b>üìà –ß—Ç–æ –±—É–¥–µ–º –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å ?</b>''',parse_mode='HTML', reply_markup=keyboard)
		else:
			q.execute(f'SELECT chanel_id FROM chanel WHERE bot = "{bot_name}"')
			row = q.fetchone()
			connection.close()
			invite_link =  bot_create.create_chat_invite_link(chat_id = row[0], member_limit = 1).invite_link
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text='‚ÜóÔ∏è –í—Å—Ç—É–ø–∏—Ç—å', url= invite_link))
			keyboard.add(types.InlineKeyboardButton(text='‚ôªÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data='–ù–∞–∫—Ä—É—Ç–∫–∞ '))
			bot.send_message(call.message.chat.id, f'''<b>‚ùóÔ∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–∞—à –∫–∞–Ω–∞–ª:</b>
<b>‚îî–°—Å—ã–ª–∫–∞:</b> <a href="{invite_link}">{invite_link}</a>''',parse_mode='HTML', reply_markup=keyboard,disable_web_page_preview = True)

	elif a[0] == '–ø–æ–∫—É–ø–∫–∏':
		users_zadanie_del(call.message.chat.id)
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		q.execute(f'SELECT * FROM list_zakaz_shop WHERE user = "{call.message.chat.id}" and bot = "{bot_name}" ORDER BY id DESC LIMIT 10')
		row = q.fetchall()
		keyboard = types.InlineKeyboardMarkup()
		if str(row) != '[]':
			keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', callback_data=f'–º–µ–Ω—é '))
			status = is_subscribed(call.message.chat.id)
			if status == True:
				keyboard = types.InlineKeyboardMarkup()
				keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', callback_data=f'–º–µ–Ω—é '))	
				doc = open(f'/root/smm/tovar/pokupki/{call.message.chat.id}_{bot_name}.txt', 'rb')
				bot.send_document(call.message.chat.id, doc, caption='üóÇ –í–∞—à–∏ –∫—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.',reply_markup=keyboard)
				doc.close()
				connection.close()
			else:
				q.execute(f'SELECT chanel_id FROM chanel WHERE bot = "{bot_name}"')
				row = q.fetchone()
				invite_link =  bot_create.create_chat_invite_link(chat_id = row[0], member_limit = 1).invite_link
				keyboard = types.InlineKeyboardMarkup()
				keyboard.add(types.InlineKeyboardButton(text='‚ÜóÔ∏è –í—Å—Ç—É–ø–∏—Ç—å', url= invite_link))
				keyboard.add(types.InlineKeyboardButton(text='‚ôªÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data='–∑–∞–∫–∞–∑—ã '))
				bot.send_message(call.message.chat.id, f'''<b>‚ùóÔ∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–∞—à –∫–∞–Ω–∞–ª:</b>
<b>‚îî–°—Å—ã–ª–∫–∞:</b> <a href="{invite_link}">{invite_link}</a>''',parse_mode='HTML', reply_markup=keyboard,disable_web_page_preview = True)
				connection.close()
		else:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é', callback_data=f'–º–µ–Ω—é '))
			bot.send_message(call.message.chat.id, f'''<b>üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫, –Ω–æ –≤ –±—É–¥—É—â–µ–º –æ–Ω–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥—É—Ç —Ç—É—Ç.</b>''' ,parse_mode='HTML',reply_markup=keyboard)		
	elif a[0] == '–∑–∞–∫–∞–∑—ã':
		users_zadanie_del(call.message.chat.id)
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		q.execute(f'SELECT * FROM list_zakaz WHERE user = "{call.message.chat.id}" and bot = "{bot_name}" ORDER BY id DESC LIMIT 10')
		row = q.fetchall()
		if str(row) != '[]':
			text = ''
			for i in row:
				text += f'''‚ÑπÔ∏è ID: <code>{i[7]}</code>
<b>‚îú–£—Å–ª—É–≥–∞:</b> <code>{i[5]}</code>
<b>‚îú–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> <code>{i[3]}</code>
<b>‚îî–°—Å—ã–ª–∫–∞:</b> <code>{i[2]}</code>\n\n'''
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text='üîé –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑',callback_data='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å '))
			keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'–ù–∞–∫—Ä—É—Ç–∫–∞ '))
			status = is_subscribed(call.message.chat.id)
			if status == True:
				connection.close()
				bot.send_message(call.message.chat.id, f'''<b>‚ÑπÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:</b>

{text}''' ,parse_mode='HTML',reply_markup=keyboard)
			else:
				q.execute(f'SELECT chanel_id FROM chanel WHERE bot = "{bot_name}"')
				row = q.fetchone()
				invite_link =  bot_create.create_chat_invite_link(chat_id = row[0], member_limit = 1).invite_link
				keyboard = types.InlineKeyboardMarkup()
				keyboard.add(types.InlineKeyboardButton(text='‚ÜóÔ∏è –í—Å—Ç—É–ø–∏—Ç—å', url= invite_link))
				keyboard.add(types.InlineKeyboardButton(text='‚ôªÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å', callback_data='–∑–∞–∫–∞–∑—ã '))
				bot.send_message(call.message.chat.id, f'''<b>‚ùóÔ∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—Å—Ç—É–ø–∏—Ç—å –≤ –Ω–∞—à –∫–∞–Ω–∞–ª:</b>
<b>‚îî–°—Å—ã–ª–∫–∞:</b> <a href="{invite_link}">{invite_link}</a>''',parse_mode='HTML', reply_markup=keyboard,disable_web_page_preview = True)
				connection.close()
		else:
			connection.close()
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=f'–ù–∞–∫—Ä—É—Ç–∫–∞ '))
			bot.send_message(call.message.chat.id, f'''<b>üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤, –Ω–æ –≤ –±—É–¥—É—â–µ–º –æ–Ω–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –±—É–¥—É—Ç —Ç—É—Ç.</b>''' ,parse_mode='HTML',reply_markup=keyboard)
	
	elif call.data == 'awhat_oplata':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'''‚ñ™Ô∏è Qiwi\CARD''',callback_data='add_depozit'))
		keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ø—Ä–æ—Ñ–∏–ª—å '))
		bot.send_message(call.message.chat.id, f'''üì• –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:''',parse_mode='HTML', reply_markup=keyboard)
	
	elif a[0] == 'add_depozit':
		keyboard = types.InlineKeyboardMarkup()
		users_zadanie.append(call.message.chat.id)
		keyboard.add(types.InlineKeyboardButton(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∞',callback_data=f'–ø—Ä–æ—Ñ–∏–ª—å '))
		msg = bot.send_message(call.message.chat.id,'''‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:''', reply_markup=keyboard, parse_mode='HTML')
		bot.register_next_step_handler(msg, btc_oplata_1)

	elif a[0] == 'add_depozit2':
		keyboard = types.InlineKeyboardMarkup()
		users_zadanie.append(call.message.chat.id)
		keyboard.add(types.InlineKeyboardButton(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∞',callback_data=f'–ø—Ä–æ—Ñ–∏–ª—å '))
		msg = bot.send_message(call.message.chat.id,'''‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:''', reply_markup=keyboard, parse_mode='HTML')
		bot.register_next_step_handler(msg, btc_oplata_2)

	elif a[0] == '–Ω–∞–∑–∞–¥':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		keyboard = types.InlineKeyboardMarkup()
		q.execute(f"SELECT * FROM category")
		rows = q.fetchall()
		btns = []
		for i in range(len(rows)):
			btns.append(types.InlineKeyboardButton(text=rows[i][0], callback_data=f'sub_category_ {rows[i][1]}'))
		while btns != []:
			try:
				keyboard.add(
					btns[0],
					btns[1]
					)
				del btns[1], btns[0]
			except:
				keyboard.add(btns[0])
				del btns[0]
		connection.close()
		keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='–ù–∞–∫—Ä—É—Ç–∫–∞ '))
		bot.send_message(call.message.chat.id, f'''‚óæÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç –º–µ–Ω—é:''',parse_mode='HTML', reply_markup=keyboard)
		
	elif a[0] == 'sub_category_':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		sub_category_id = a[1]
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		q.execute(f"update ugc_users set categ = '{sub_category_id}' where id = '{call.message.chat.id}' and bot = '{bot_name}'")
		connection.commit()
		keyboard = types.InlineKeyboardMarkup()
		q.execute(f"SELECT * FROM sub_category where category = '{sub_category_id}'")
		rows = q.fetchall()
		connection.close()
		for i in rows:
			keyboard.add(types.InlineKeyboardButton(text=i[0],callback_data=f'item_ {i[2]}'))
		keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ù–∞–∫—Ä—É—Ç–∫–∞ '))
		bot.send_message(call.message.chat.id, f'''<b>üìà –ö–∞–∫–∞—è —É—Å–ª—É–≥–∞ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ?</b>''',parse_mode='HTML', reply_markup=keyboard)

	elif a[0] == 'item_':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		item_id = a[1]
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		keyboard = types.InlineKeyboardMarkup()
		q.execute(f"SELECT categ FROM ugc_users where id = '{call.message.chat.id}' and bot = '{bot_name}'")
		categ = q.fetchone()[0]
		q.execute(f"update ugc_users set categ1 = '{item_id}' where id = '{call.message.chat.id}' and bot = '{bot_name}'")
		connection.commit()
		q.execute(f"SELECT * FROM item where sub_category = '{item_id}'")
		rows = q.fetchall()
		for i in rows:
			q.execute(f"SELECT * FROM item where item_id = '{i[8]}'")
			rowss = q.fetchone()
			q.execute(f"SELECT prace FROM list_bot where bot = '{bot_name}'")
			plusprace = q.fetchone()[0]

			praces121 = float(rowss[3]) / 100 * float(plusprace)
			praces = float(rowss[3]) + float(praces121)
			keyboard.add(types.InlineKeyboardButton(text=f'{i[0]} | {praces} RUB',callback_data=f'usluga_ {i[8]}'))
		connection.close()
		keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'sub_category_ {categ}'))
		bot.send_message(call.message.chat.id, f'''<b>üìà –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Å–ª—É–≥—É:</b>
‚îî –¶–µ–Ω–∞ –∑–∞ 1000 —à—Ç.''',parse_mode='HTML', reply_markup=keyboard)

	elif a[0] == 'usluga_':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		usluga__id = a[1]
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		q.execute(f"SELECT categ1 FROM ugc_users where id = '{call.message.chat.id}' and bot = '{bot_name}'")
		categ1 = q.fetchone()[0]
		q.execute(f"update ugc_users set usluga = '{usluga__id}' where id = '{call.message.chat.id}' and bot = '{bot_name}'")
		connection.commit()
		keyboard = types.InlineKeyboardMarkup()
		q.execute(f"SELECT * FROM ugc_users where id = '{call.message.chat.id}' and bot = '{bot_name}'")
		rowss = q.fetchone()
		q.execute(f"SELECT * FROM item where item_id = '{usluga__id}'")
		rows = q.fetchone()
		q.execute(f"SELECT prace FROM list_bot where bot = '{bot_name}'")
		plusprace = q.fetchone()[0]
		praces1212 = float(rows[3]) / 100 * float(plusprace)
		praces = float(rows[3]) + float(praces1212)
		print(praces1212)
		print(praces)

		connection.close()
		keyboard.add(types.InlineKeyboardButton(text='üõí –ó–∞–∫–∞–∑–∞—Ç—å',callback_data=f'zakazat'))
		keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'item_ {categ1}'))
		bot.send_message(call.message.chat.id, f'''üì¶ <b>–£—Å–ª—É–≥–∞:</b> <code>{rows[0]}</code> 
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üìú <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> 
<code>{rows[7]}</code>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üì• <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–∞: {rows[4]}</b> 
üì§ <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {rows[5]}</b> 
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üí≥ <b>–¶–µ–Ω–∞ –∑–∞ 1000: </b> <b>{praces} RUB</b>''',parse_mode='HTML', reply_markup=keyboard)

	elif a[0] == 'zakazat':
		users_zadanie.append(call.message.chat.id)
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		

		q.execute(f"SELECT usluga FROM ugc_users where id = '{call.message.chat.id}' and bot = '{bot_name}'")

		usluga__id = q.fetchone()[0]

		q.execute(f"SELECT * FROM item where item_id = '{usluga__id}'")
		rows = q.fetchone()
		connection.close()
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∞',callback_data=f'–ù–∞–∫—Ä—É—Ç–∫–∞ '))
		msg = bot.send_message(call.message.chat.id, f'''<b>üìÑ –í—ã –≤—ã–±—Ä–∞–ª–∏ —É—Å–ª—É–≥—É: <code>{rows[0]}</code>
‚îî–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:</b> ''',parse_mode='HTML', reply_markup=keyboard)
		bot.register_next_step_handler(msg, newzakaz, msg.message_id)
	
	elif a[0] == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å":
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		users_zadanie.append(call.message.chat.id)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∞',callback_data=f'–º–µ–Ω—é '))
		msg= bot.send_message(call.message.chat.id, "‚úçÔ∏è<b>–ù–∞–ø–∏—à–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ (ID –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –≤–æ –≤–∫–ª–∞–¥–∫–µ ¬´–ú–æ–∏ –∑–∞–∫–∞–∑—ã¬ª):</b>",parse_mode='HTML', reply_markup=keyboard)
		bot.register_next_step_handler(msg, statuszakaz, msg.message_id)
	
	elif a[0] == 'ref':
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()
		q.execute(f'SELECT COUNT(id) FROM ugc_users WHERE ref = "{call.message.chat.id}" and bot = "{bot_name}"')
		user_ref_count = q.fetchone()[0]
		connection.close()
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ø—Ä–æ—Ñ–∏–ª—å '))
		bot.send_message(call.message.chat.id, f'''<b>ü§ù –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>
<b>‚îî–°—Å—ã–ª–∫–∞:</b> https://t.me/{bot_name}?start={call.message.chat.id}

<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>
<b>‚îú–†–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> <code>{user_ref_count}</code>
<b>‚îú–ü—Ä–æ—Ü–µ–Ω—Ç:</b> <code>5%</code>
<b>‚îî–ï—Å–ª–∏ –≤—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ —á–µ–ª–æ–≤–µ–∫–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ø–æ–ª–Ω–∏—Ç –±–∞–ª–∞–Ω—Å –≤ –±–æ—Ç–µ, –≤–∞–º –¥–∞–¥—É—Ç 5% –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!</b>''',parse_mode='HTML',reply_markup=keyboard, disable_web_page_preview=True)	

	elif a[0] == '–ó–∞–∫–∞–∑–∞—Ç—å':
		try:
			bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
			connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
			q = connection.cursor()
			q.execute(f"SELECT * FROM ugc_users where id = '{call.message.chat.id}' and bot = '{bot_name}'")
			confzakaz = q.fetchone()
			q.execute(f"SELECT * FROM item where item_id = '{confzakaz[4]}'")
			rowsss = q.fetchone()
			q.execute(f"SELECT user FROM list_bot where bot = '{bot_name}'")
			users = q.fetchone()[0]
			q.execute(f"SELECT prace FROM list_bot where bot = '{bot_name}'")
			plusprace = q.fetchone()[0]

			prace_admin = float(rowsss[3]) / 100 * float(plusprace)
			praces_usluga = float(rowsss[3]) + float(prace_admin)
			prace = float(praces_usluga) / 1000 * float(confzakaz[12])
			pracess = float(rowsss[3]) / 1000 * float(confzakaz[12]) # –¶–µ–Ω–∞ –±–µ–∑ –Ω–∞–∫—Ä—É—Ç–∫–∏
			prace_admin = float(prace) - float(pracess)
			if int(confzakaz[6]) >= int(prace):
				tomorrow = datetime.now()
				data = tomorrow.strftime('%d/%m/%Y')
				apinakrutka  = 'ef43cb03bd410b3d6fa1622b00756ced'
				idnakrutka  = rowsss[6]
				link  = confzakaz[13]
				colvo  = confzakaz[12]
				zakazid = urllib.request.urlopen(f'https://partner.soc-proof.su/api/v2/?key={apinakrutka}&action=add&service={idnakrutka}&link={link}&quantity={colvo}').read()
				result = json.loads(zakazid.decode('utf8'))
				zakazid2 = (result['order'])
				print(zakazid2)
				q.execute(f"update ugc_users set balance = balance - '{prace}' where id = '{call.message.chat.id}' and bot = '{bot_name}'")
				connection.commit()
				q.execute("INSERT INTO list_zakaz (user,link,colvo,data,usluga,bot,id_nakzakaz) VALUES ('%s', '%s', '%s', '%s', '%s', '%s', '%s')"%(call.message.chat.id,confzakaz[13],confzakaz[12],data,str(rowsss[0]),bot_name,zakazid2))
				connection.commit()
				q.execute(f"update list_bot set logi = '{data}' WHERE bot = '{bot_name}'")
				connection.commit()
				q.execute(f"update list_bot set balance = balance + '{prace_admin}' where bot = '{bot_name}'")
				connection.commit()
				q.execute(f"update list_bot set dohod = dohod + '{prace_admin}' where bot = '{bot_name}'")
				connection.commit()
				connection.close()
				keyboard = types.InlineKeyboardMarkup()
				keyboard.add(types.InlineKeyboardButton(text='üíå –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üíå',callback_data=f'–û—Å—Ç–∞–≤–∏—Ç—å–æ—Ç–∑—ã–≤ '))
				keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—Å—è –≤ –º–µ–Ω—é',callback_data=f'–º–µ–Ω—é '))
				bot.send_message(call.message.chat.id, f'''<b>‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É:</b>
‚îî<i>–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞</i> - <code>{zakazid2}</code>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
<b>‚ù§Ô∏è –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ –Ω–∞—Å: </b>
‚îî<i>–ù–∞–º –±—ã–ª–æ –±—ã–ª–æ –±—ã –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, –µ—Å–ª–∏ –±—ã –≤—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤!</i>''',parse_mode='HTML',reply_markup=keyboard, disable_web_page_preview=True)
				try:
					connection.close()
					keyboard = types.InlineKeyboardMarkup()
					keyboard.add(types.InlineKeyboardButton(text='‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å',callback_data=f'–ó–∞–∫—Ä—ã—Ç—å '))
					bot.send_message(users, f'''<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:</b> <code>{rowsss[0]}</code> <b>| –î–æ—Ö–æ–¥:</b> <code>{prace_admin}</code> <b>RUB</b>''',parse_mode='HTML',reply_markup=keyboard, disable_web_page_preview=True)
				except:
					pass
			else:
				connection.close()
				keyboard = types.InlineKeyboardMarkup()
				keyboard.add(types.InlineKeyboardButton(text='üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å',callback_data=f'–ø—Ä–æ—Ñ–∏–ª—å '))
				keyboard.add(types.InlineKeyboardButton(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∞',callback_data=f'–ù–∞–∫—Ä—É—Ç–∫–∞ '))
				bot.send_message(call.message.chat.id, f'''<b>‚ùóÔ∏è –û—à–∏–±–∫–∞: –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–æ {prace} RUB.</b>''' ,parse_mode='HTML',reply_markup=keyboard)
		except Exception as e:
			print(e)
			connection.close()
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—Å—è –≤ –º–µ–Ω—é',callback_data=f'–º–µ–Ω—é '))
			bot.send_message(call.message.chat.id, f'''<b>‚ùóÔ∏è –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞</b>''',parse_mode='HTML',reply_markup=keyboard)


	elif a[0] == "–û—Å—Ç–∞–≤–∏—Ç—å–æ—Ç–∑—ã–≤":
		users_zadanie.append(call.message.chat.id)
		bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∞',callback_data=f'–º–µ–Ω—é '))
		msg= bot.send_message(call.message.chat.id, "<b>‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:</b>",parse_mode='HTML', reply_markup=keyboard)
		bot.register_next_step_handler(msg, reviews, msg.message_id)
	else:
		connection = connect(host=bd_host,user=bd_login,password=bd_pass,database=bd_base)
		q = connection.cursor()	
		q.execute(f"SELECT * FROM keyboards WHERE bot = '{bot_name}' and id = '{a[0]}'")
		rows = q.fetchone()
		connection.close()
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—Å—è –≤ –º–µ–Ω—é',callback_data=f'–º–µ–Ω—é '))
		if rows != None:
			try:
				bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
				bot.send_message(call.message.chat.id, rows[2], parse_mode='HTML' ,reply_markup=keyboard)
			except:
				bot.delete_message(chat_id=call.message.chat.id,message_id=call.message.message_id)
				bot.send_message(call.message.chat.id, '''‚úñÔ∏è –û—à–∏–±–∫–∞.''' ,parse_mode='HTML',reply_markup=keyboard)
	

bot.polling(True)

