# -*- coding: utf-8 -*-
from decimal import *
import telebot
import datetime
from telebot import types, apihelper
import sqlite3
import random, string
import time
import os,random,shutil,subprocess
from subprocess import check_output
import json
import keyboards
import requests
from datetime import datetime, timedelta
from datetime import date
from dateutil.relativedelta import relativedelta
import secrets
import hashlib
import config
from getpass import getpass
from mysql.connector import connect, Error
import pytz
import itertools 
import json
import urllib.request

bot = telebot.TeleBot('5721496808:AAH-rI8XBupvKjO1IfQ_MZL51vkBzBFyz98')
@bot.message_handler(content_types=['text','photo','document'])
def send_text(message):
	if message.chat.type == 'private':
		if message.text == '/admin':
			admin = config.admin
			for i in admin:
				if message.chat.id == i:
					keyboard = types.InlineKeyboardMarkup()
					keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
					bot.send_message(message.chat.id, f''' üñê –ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä !''',parse_mode='HTML', reply_markup=keyboard)
					

def obnovabot(message,idsms):
	bot.delete_message(message.chat.id,message.message_id)
	bot.delete_message(message.chat.id,idsms)
	if message.text != '–û—Ç–º–µ–Ω–∞':
		try:
			save_dir = os.getcwd()
			file_name = message.document.file_name
			file_id = message.document.file_name
			file_id_info = bot.get_file(message.document.file_id)
			downloaded_file = bot.download_file(file_id_info.file_path)
			src = file_name
			with open(save_dir + "/bot/" + src, 'wb') as new_file:
				new_file.write(downloaded_file)
			connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
			q = connection.cursor()
			q.execute(f"SELECT * FROM list_bot")
			rows = q.fetchall()
			for i in rows:
				name = i[6]
				try:
					path = os.path.join(f'/root/smm/bot_list/{name}/', f'main.py')
					os.remove(path)
				except:
					pass
				current_dir = os.getcwd()
				path = f'{current_dir}/bot_list/{name}'
				src = f'{current_dir}/bot/main.py'
				shutil.copy(src, path ,follow_symlinks=True)
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))
			bot.send_message(message.chat.id, "[*] File added:\nFile name - {}\nFile directory - {}".format(str(file_name), str(save_dir)), reply_markup=keyboard)
		except Exception as ex:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
			bot.send_message(message.chat.id, "[!] error - {}".format(str(ex)), reply_markup=keyboard)

	else:
		user = message.chat.id
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		hideBoard = types.ReplyKeyboardRemove()
		msg = bot.send_message(message.chat.id, f'''‚è≥ –û—Ç–º–µ–Ω—è–µ–º.......''', reply_markup=hideBoard)
		bot.delete_message(message.from_user.id,msg.message_id)
		bot.send_message(message.chat.id, f'''‚úñÔ∏è –û—Ç–º–µ–Ω–∏–ª–∏.''',parse_mode='HTML', reply_markup=keyboard)

def support_otvet(message,idsms,idsup):
	bot.delete_message(message.chat.id,message.message_id)
	bot.delete_message(message.chat.id,idsms)
	try:
		if message.text.lower() != '–æ—Ç–º–µ–Ω–∞':
			connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
			q = connection.cursor()
			q.execute(f"SELECT * FROM support where id = '{idsup}'")
			row = q.fetchone()
			q.execute(f"update support set status = '0' where id = '{idsup}'")
			connection.commit()
			texts = F'''{row[2]}
	‚îî[Adm]<code>{message.text}</code>'''
			q.execute(f"update support set text = '{texts}' where id = '{idsup}'")
			connection.commit()
			q.execute(f"SELECT bot_token FROM list_bot where bot = '{row[4]}' ")
			bot_token = q.fetchone()[0]
			bots = telebot.TeleBot(bot_token)
			admin = config.admin
			try:
				bots.send_message(row[1], f'<b>‚ùóÔ∏è –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> <code>{message.text}</code>',parse_mode='HTML')
			except:
				pass
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ü–æ–¥–¥–µ—Ä–∂–∫–∞'))
			bot.send_message(message.chat.id, '‚úîÔ∏è  –£—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –∑–∞–ø—Ä–æ—Å.',parse_mode='HTML', reply_markup=keyboard)
		else:
			user = message.chat.id
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
			hideBoard = types.ReplyKeyboardRemove()
			msg = bot.send_message(message.chat.id, f'''‚è≥ –û—Ç–º–µ–Ω—è–µ–º.......''', reply_markup=hideBoard)
			bot.delete_message(message.from_user.id,msg.message_id)
			bot.send_message(message.chat.id, f'''‚úñÔ∏è –û—Ç–º–µ–Ω–∏–ª–∏.''',parse_mode='HTML', reply_markup=keyboard)
	except Exception as e:
		print(e)
		bot.send_message(-1001695154512, f'–ñ–æ–ø–∞ –≠–¢–û –ü–ò–ó–î–ï–¶ \n\n\n{e}')
		pass

def editdohod(message,idsms,ssss):
	bot.delete_message(message.chat.id,message.message_id)
	bot.delete_message(message.chat.id,idsms)
	if message.text != '–û—Ç–º–µ–Ω–∞':
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		print(ssss)
		q.execute(f"update dohod set {str(ssss)} = {str(ssss)} + '{message.text}' WHERE id = '1'")
		connection.commit()
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–î–æ—Ö–æ–¥'))
		bot.send_message(message.chat.id, f'''–ì–æ—Ç–æ–≤–æ.''',parse_mode='HTML', reply_markup=keyboard)
	else:
		user = message.chat.id
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		hideBoard = types.ReplyKeyboardRemove()
		msg = bot.send_message(message.chat.id, f'''‚è≥ –û—Ç–º–µ–Ω—è–µ–º.......''', reply_markup=hideBoard)
		bot.delete_message(message.from_user.id,msg.message_id)
		bot.send_message(message.chat.id, f'''‚úñÔ∏è –û—Ç–º–µ–Ω–∏–ª–∏.''',parse_mode='HTML', reply_markup=keyboard)


def sendall(message,idsms):
	bot.delete_message(message.chat.id,message.message_id)
	bot.delete_message(message.chat.id,idsms)
	global botsname
	botsname = message.text
	if message.text != '–û—Ç–º–µ–Ω–∞':
		msg = bot.send_message(message.chat.id, f'''‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:''',parse_mode='HTML', reply_markup=keyboards.otmena)
		bot.register_next_step_handler(msg, sendallgo ,msg.message_id)
	else:
		user = message.chat.id
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		hideBoard = types.ReplyKeyboardRemove()
		msg = bot.send_message(message.chat.id, f'''‚è≥ –û—Ç–º–µ–Ω—è–µ–º.......''', reply_markup=hideBoard)
		bot.delete_message(message.from_user.id,msg.message_id)
		bot.send_message(message.chat.id, f'''‚úñÔ∏è –û—Ç–º–µ–Ω–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É.''',parse_mode='HTML', reply_markup=keyboard)


def sendgoallbase(message,idsms):
	bot.delete_message(message.chat.id,message.message_id)
	bot.delete_message(message.chat.id,idsms)
	sends = 0
	erors = 0
	if message.text != '–û—Ç–º–µ–Ω–∞':
		keyboa = types.InlineKeyboardMarkup()
		keyboa.add(types.InlineKeyboardButton(text='‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å',callback_data=f'–ó–∞–∫—Ä—ã—Ç—å'))
		msg = bot.send_message(message.chat.id, '''‚è≥ –ò–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∞...''')
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		q.execute(f'SELECT * FROM list_bot WHERE bot != "SimpsonSmm_bot"')
		token = q.fetchall()
		for i in token:
			bot_send = telebot.TeleBot(i[7])
			q.execute(f'SELECT * FROM ugc_users WHERE bot = "{i[6]}"')
			row = q.fetchall()
			for i in row:
				time.sleep(0.03)
				if message.content_type == 'text':
					try:
						bot_send.send_message(i[0], message.text ,entities = message.entities, reply_markup=keyboa)
						sends += 1
					except:
						erors += 1
				elif message.content_type == 'photo':
					try:
						bot_send.send_photo(i[0],message.photo[0].file_id, message.caption ,caption_entities = message.caption_entities)
						sends += 1
					except:
						erors += 1
		bot.delete_message(message.from_user.id,msg.message_id)
		bot.send_message(message.chat.id, f'''<b>üìà –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>:
<b>‚îú–î–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ:</b> <code>{sends}</code>
<b>‚îî–û—à–∏–±–∫–∏:</b> <code>{erors}</code>\n\n''',parse_mode='HTML', reply_markup=keyboard)

	else:
		user = message.chat.id
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		hideBoard = types.ReplyKeyboardRemove()
		msg = bot.send_message(message.chat.id, f'''‚è≥ –û—Ç–º–µ–Ω—è–µ–º.......''', reply_markup=hideBoard)
		bot.delete_message(message.from_user.id,msg.message_id)
		bot.send_message(message.chat.id, f'''‚úñÔ∏è –û—Ç–º–µ–Ω–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É.''',parse_mode='HTML', reply_markup=keyboard)


def add_categor(message,idsms):
	bot.delete_message(message.chat.id,message.message_id)
	bot.delete_message(message.chat.id,idsms)
	if message.text != '–û—Ç–º–µ–Ω–∞':
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		q.execute("INSERT INTO category (name) VALUES ('%s')"%(message.text))
		connection.commit()
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		bot.send_message(message.chat.id, f'''‚úîÔ∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞''', reply_markup=keyboard)
	else:
		user = message.chat.id
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		hideBoard = types.ReplyKeyboardRemove()
		msg = bot.send_message(message.chat.id, f'''‚è≥ –û—Ç–º–µ–Ω—è–µ–º.......''', reply_markup=hideBoard)
		bot.delete_message(message.from_user.id,msg.message_id)
		bot.send_message(message.chat.id, f'''‚úñÔ∏è –û—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.''',parse_mode='HTML', reply_markup=keyboard)

def add_razdel(message,idsms,idcategor):
	bot.delete_message(message.chat.id,message.message_id)
	bot.delete_message(message.chat.id,idsms)
	if message.text != '–û—Ç–º–µ–Ω–∞':
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		q.execute("INSERT INTO sub_category (name,category) VALUES ('%s','%s')"%(message.text,idcategor))
		connection.commit()
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		bot.send_message(message.chat.id, f'''‚úîÔ∏è  –†–∞–∑–¥–µ–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω''', reply_markup=keyboard)
	else:
		user = message.chat.id
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		hideBoard = types.ReplyKeyboardRemove()
		msg = bot.send_message(message.chat.id, f'''‚è≥ –û—Ç–º–µ–Ω—è–µ–º.......''', reply_markup=hideBoard)
		bot.delete_message(message.from_user.id,msg.message_id)
		bot.send_message(message.chat.id, f'''‚úñÔ∏è –û—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.''',parse_mode='HTML', reply_markup=keyboard)


def add_usluga_1(message,idsms,idrazdel):
	bot.delete_message(message.chat.id,message.message_id)
	bot.delete_message(message.chat.id,idsms)
	if message.text != '–û—Ç–º–µ–Ω–∞':
		global name_usluga
		name_usluga = message.text
		msg = bot.send_message(message.chat.id, f'''‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:''',parse_mode='HTML', reply_markup=keyboards.otmena)
		idsms = msg.message_id
		bot.register_next_step_handler(msg, add_usluga_2,idsms,idrazdel)
	else:
		user = message.chat.id
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		bot.delete_message(message.from_user.id,msg.message_id)
		bot.send_message(message.chat.id, f'''‚úñÔ∏è –û—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.''',parse_mode='HTML', reply_markup=keyboard)

def add_usluga_2(message,idsms,idrazdel):
	bot.delete_message(message.chat.id,message.message_id)
	bot.delete_message(message.chat.id,idsms)
	if message.text != '–û—Ç–º–µ–Ω–∞':
		global info_usluga
		info_usluga = message.text
		msg = bot.send_message(message.chat.id, f'''‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ 1000 –µ–¥–∏–Ω–∏—Ü:''',parse_mode='HTML', reply_markup=keyboards.otmena)
		idsms = msg.message_id
		bot.register_next_step_handler(msg, add_usluga_3,idsms,idrazdel)
	else:
		user = message.chat.id
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		bot.delete_message(message.from_user.id,msg.message_id)
		bot.send_message(message.chat.id, f'''‚úñÔ∏è –û—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.''',parse_mode='HTML', reply_markup=keyboard)

def add_usluga_3(message,idsms,idrazdel):
	bot.delete_message(message.chat.id,message.message_id)
	bot.delete_message(message.chat.id,idsms)
	if message.text != '–û—Ç–º–µ–Ω–∞':
		global prace_usluga
		prace_usluga = message.text
		msg = bot.send_message(message.chat.id, f'''‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ –º–∏–Ω –µ–¥–∏–Ω–∏—Ü —É—Å–ª—É–≥–∏:''',parse_mode='HTML', reply_markup=keyboards.otmena)
		idsms = msg.message_id
		bot.register_next_step_handler(msg, add_usluga_4,idsms,idrazdel)
	else:
		user = message.chat.id
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		bot.delete_message(message.from_user.id,msg.message_id)
		bot.send_message(message.chat.id, f'''‚úñÔ∏è –û—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.''',parse_mode='HTML', reply_markup=keyboard)

def add_usluga_4(message,idsms,idrazdel):
	bot.delete_message(message.chat.id,message.message_id)
	bot.delete_message(message.chat.id,idsms)
	if message.text != '–û—Ç–º–µ–Ω–∞':
		global min_usluga
		min_usluga = message.text
		msg = bot.send_message(message.chat.id, f'''‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å –µ–¥–∏–Ω–∏—Ü —É—Å–ª—É–≥–∏:''',parse_mode='HTML', reply_markup=keyboards.otmena)
		idsms = msg.message_id
		bot.register_next_step_handler(msg, add_usluga_5,idsms,idrazdel)
	else:
		user = message.chat.id
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		bot.delete_message(message.from_user.id,msg.message_id)
		bot.send_message(message.chat.id, f'''‚úñÔ∏è –û—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.''',parse_mode='HTML', reply_markup=keyboard)

def add_usluga_5(message,idsms,idrazdel):
	bot.delete_message(message.chat.id,message.message_id)
	bot.delete_message(message.chat.id,idsms)
	if message.text != '–û—Ç–º–µ–Ω–∞':
		global max_usluga
		max_usluga = message.text
		msg = bot.send_message(message.chat.id, f'''‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ ID SERVICE —Å –ø–∞—Ä—Ç–Ω–µ—Ä–∞:''',parse_mode='HTML', reply_markup=keyboards.otmena)
		idsms = msg.message_id
		bot.register_next_step_handler(msg, add_usluga_6,idsms,idrazdel)
	else:
		user = message.chat.id
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		bot.delete_message(message.from_user.id,msg.message_id)
		bot.send_message(message.chat.id, f'''‚úñÔ∏è –û—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.''',parse_mode='HTML', reply_markup=keyboard)

def add_usluga_6(message,idsms,idrazdel):
	bot.delete_message(message.chat.id,message.message_id)
	bot.delete_message(message.chat.id,idsms)
	if message.text != '–û—Ç–º–µ–Ω–∞':
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		q.execute("INSERT INTO item (name,sub_category,category,cost,min,max,service_id,item_desc) VALUES ('%s','%s','%s','%s','%s','%s','%s','%s')"%(name_usluga,idrazdel,idrazdel,prace_usluga,min_usluga,max_usluga,message.text,info_usluga))
		connection.commit()
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		bot.send_message(message.chat.id, f'''‚úîÔ∏è  –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞''', reply_markup=keyboard)
	else:
		user = message.chat.id
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		bot.delete_message(message.from_user.id,msg.message_id)
		bot.send_message(message.chat.id, f'''‚úñÔ∏è –û—Ç–º–µ–Ω–∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ.''',parse_mode='HTML', reply_markup=keyboard)


def sendallgo(message,idsms):
	bot.delete_message(message.chat.id,message.message_id)
	bot.delete_message(message.chat.id,idsms)
	if message.text != '–û—Ç–º–µ–Ω–∞':
		msg = bot.send_message(message.chat.id, '''‚è≥ –ò–¥–µ—Ç —Ä–∞—Å—Å—ã–ª–∫–∞...''')
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		q.execute(f'SELECT bot_token FROM list_bot WHERE bot = "{botsname}"')
		token = q.fetchone()[0]
		bot_send = telebot.TeleBot(token)
		if botsname == 'JopaPosting':
			connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database='bomber')
			q = connection.cursor()
			q.execute(f'SELECT * FROM ugc_users')
			row = q.fetchall()
		elif botsname == 'JopaPosting':
			connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database='avtopost_new')
			q = connection.cursor()
			q.execute(f'SELECT * FROM ugc_users')
			row = q.fetchall()
		else:
			q.execute(f'SELECT * FROM ugc_users WHERE bot = "{botsname}"')
			row = q.fetchall()
		sends = 0
		erors = 0
		keyboa = types.InlineKeyboardMarkup()
		keyboa.add(types.InlineKeyboardButton(text='‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å',callback_data=f'–ó–∞–∫—Ä—ã—Ç—å'))
		for i in row:
			if botsname == 'JopaPosting':
				user = i[1]
			elif botsname == 'JopaPosting':
				user = i[1]
			else:
				user = i[0]
			time.sleep(0.03)
			if message.content_type == 'text':
				try:
					bot_send.send_message(user, message.text ,entities = message.entities, reply_markup=keyboa)
					sends += 1
				except:
					erors += 1
			elif message.content_type == 'photo':
				try:
					bot_send.send_photo(user,message.photo[0].file_id, message.caption ,caption_entities = message.caption_entities, reply_markup=keyboa)
					sends += 1
				except:
					erors += 1
		bot.delete_message(message.from_user.id,msg.message_id)
		bot.send_message(message.chat.id, f'''<b>üìà –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>:
<b>‚îú–ë–æ—Ç:</b> @{botsname}
<b>‚îú–î–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ:</b> <code>{sends}</code>
<b>‚îî–û—à–∏–±–∫–∏:</b> <code>{erors}</code>\n\n''',parse_mode='HTML', reply_markup=keyboard)

	else:
		user = message.chat.id
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		hideBoard = types.ReplyKeyboardRemove()
		msg = bot.send_message(message.chat.id, f'''‚è≥ –û—Ç–º–µ–Ω—è–µ–º.......''', reply_markup=hideBoard)
		bot.delete_message(message.from_user.id,msg.message_id)
		bot.send_message(message.chat.id, f'''‚úñÔ∏è –û—Ç–º–µ–Ω–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É.''',parse_mode='HTML', reply_markup=keyboard)

def addbalance(message,users,bots,idsms):
	bot.delete_message(message.chat.id,message.message_id)
	bot.delete_message(message.chat.id,idsms)
	if message.text != '–û—Ç–º–µ–Ω–∞':
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		q.execute(f"update ugc_users set balance = '{message.text}' WHERE id = '{users}' and bot = '{bots}'")
		connection.commit()
		keyboard = types.InlineKeyboardMarkup()	
		keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))	
		bot.send_message(message.chat.id, '‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å.',parse_mode='HTML', reply_markup=keyboard)
	else:
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		hideBoard = types.ReplyKeyboardRemove()
		msg = bot.send_message(message.chat.id, f'''‚è≥ –û—Ç–º–µ–Ω—è–µ–º.......''', reply_markup=hideBoard)
		bot.delete_message(message.from_user.id,msg.message_id)
		bot.send_message(message.chat.id, f'''‚úñÔ∏è –û—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞.''',parse_mode='HTML', reply_markup=keyboard)

def addbalancebot(message,users,idsms):
	bot.delete_message(message.chat.id,message.message_id)
	bot.delete_message(message.chat.id,idsms)
	if message.text != '–û—Ç–º–µ–Ω–∞':
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		q.execute(f"update list_bot set balance = '{message.text}' WHERE id = '{users}'")
		connection.commit()
		keyboard = types.InlineKeyboardMarkup()	
		keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))	
		bot.send_message(message.chat.id, '‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å.',parse_mode='HTML', reply_markup=keyboard)
	else:
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		hideBoard = types.ReplyKeyboardRemove()
		msg = bot.send_message(message.chat.id, f'''‚è≥ –û—Ç–º–µ–Ω—è–µ–º.......''', reply_markup=hideBoard)
		bot.delete_message(message.from_user.id,msg.message_id)
		bot.send_message(message.chat.id, f'''‚úñÔ∏è –û—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞.''',parse_mode='HTML', reply_markup=keyboard)


def dell_akk(message,idsms):
	bot.delete_message(message.chat.id,message.message_id)
	bot.delete_message(message.chat.id,idsms)
	if message.text != '–û—Ç–º–µ–Ω–∞':
			connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_avtopost)
			q = connection.cursor()
			q.execute(f"DELETE FROM akk where name = '{message.text}'")
			connection.commit()
			q.execute(f"DELETE FROM list_chat where akkaunt = '{message.text}'")
			connection.commit()
			try:
				path = os.path.join('/root/JopaPosting/Avtopostbot/sessions/', f'{message.text}.session')
				os.remove(path)
				path = os.path.join('/root/JopaPosting/Avtopostbot/sessions/', f'{message.text}.session-journal')
				os.remove(path)
			except Exception as e:
				pass
			keyboard = types.InlineKeyboardMarkup()	
			keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))	
			bot.send_message(message.chat.id, '‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∞–∫–∫.',parse_mode='HTML', reply_markup=keyboard)
	else:
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		hideBoard = types.ReplyKeyboardRemove()
		msg = bot.send_message(message.chat.id, f'''‚è≥ –û—Ç–º–µ–Ω—è–µ–º.......''', reply_markup=hideBoard)
		bot.delete_message(message.from_user.id,msg.message_id)
		bot.send_message(message.chat.id, f'''‚úñÔ∏è –û—Ç–º–µ–Ω–∏–ª–∏.''',parse_mode='HTML', reply_markup=keyboard)

def add_promo(message,idsms):
	bot.delete_message(message.chat.id,message.message_id)
	bot.delete_message(message.chat.id,idsms)
	if message.text != '–û—Ç–º–µ–Ω–∞':
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		q.execute("INSERT INTO promo (name,coolvo) VALUES ('%s','%s')"%(message.text,0))
		connection.commit()
		keyboard = types.InlineKeyboardMarkup()	
		keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))	
		bot.send_message(message.chat.id, f'‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —Å—Å—ã–ª–∫—É: <a href="https://t.me/Smm_Hermes_bot?start={message.text}">{message.text}</a>',parse_mode='HTML', reply_markup=keyboard)
	else:
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		hideBoard = types.ReplyKeyboardRemove()
		msg = bot.send_message(message.chat.id, f'''‚è≥ –û—Ç–º–µ–Ω—è–µ–º.......''', reply_markup=hideBoard)
		bot.delete_message(message.from_user.id,msg.message_id)
		bot.send_message(message.chat.id, f'''‚úñÔ∏è –û—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞.''',parse_mode='HTML', reply_markup=keyboard)

def editusluga(message,idsms,idusluga,whatsmena):
	bot.delete_message(message.chat.id,message.message_id)
	bot.delete_message(message.chat.id,idsms)
	if message.text != '–û—Ç–º–µ–Ω–∞':
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		q.execute(f"update item set {str(whatsmena)} = '{message.text}' WHERE item_id = '{idusluga}'")
		connection.commit()
		keyboard = types.InlineKeyboardMarkup()	
		keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))	
		bot.send_message(message.chat.id, '‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏.',parse_mode='HTML', reply_markup=keyboard)
	else:
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		hideBoard = types.ReplyKeyboardRemove()
		msg = bot.send_message(message.chat.id, f'''‚è≥ –û—Ç–º–µ–Ω—è–µ–º.......''', reply_markup=hideBoard)
		bot.delete_message(message.from_user.id,msg.message_id)
		bot.send_message(message.chat.id, f'''‚úñÔ∏è –û—Ç–º–µ–Ω–∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞.''',parse_mode='HTML', reply_markup=keyboard)

def poisk_user_admin(message,idsms):
	bot.delete_message(message.chat.id,message.message_id)
	bot.delete_message(message.chat.id,idsms)
	if message.text.lower() != '–æ—Ç–º–µ–Ω–∞':
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		idusers = message.text.split('\n')[0]
		bot_names = message.text.split('\n')[1]
		q.execute(f"SELECT * FROM ugc_users where id = '{idusers}'and bot = '{bot_names}' ")
		row = q.fetchone()
		if row != None:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text='üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å | –†–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å',callback_data=f'–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å_ {row[0]} {bot_names}'))
			keyboard.add(types.InlineKeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å',callback_data=f'–î–æ–±–∞–≤–∏—Ç—å–±–∞–ª–∞–Ω—Å {idusers} {bot_names}'))	
			keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))	
			msg = bot.send_message(message.chat.id, f'''üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: 
üÜî ID: <code>{row[0]}</code>
üí∞ –ë–∞–ª–∞–Ω—Å: <code>{row[6]}</code>
üîê –°—Ç–∞—Ç—É—Å: <code>{row[3]}</code>
''',parse_mode='HTML',reply_markup=keyboard)
		else:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
			hideBoard = types.ReplyKeyboardRemove()
			msg = bot.send_message(message.chat.id, f'''‚è≥ –û—Ç–º–µ–Ω—è–µ–º.......''', reply_markup=hideBoard)
			bot.delete_message(message.from_user.id,msg.message_id)
			bot.send_message(message.chat.id, f'''‚úñÔ∏è –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.''',parse_mode='HTML', reply_markup=keyboard)
	else:
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		hideBoard = types.ReplyKeyboardRemove()
		msg = bot.send_message(message.chat.id, f'''‚è≥ –û—Ç–º–µ–Ω—è–µ–º.......''', reply_markup=hideBoard)
		bot.delete_message(message.from_user.id,msg.message_id)
		bot.send_message(message.chat.id, f'''‚úñÔ∏è –û—Ç–º–µ–Ω–∏–ª–∏.''',parse_mode='HTML', reply_markup=keyboard)

def poisk_bot(message,idsms):
	bot.delete_message(message.chat.id,message.message_id)
	bot.delete_message(message.chat.id,idsms)
	if message.text.lower() != '–æ—Ç–º–µ–Ω–∞':
		# try:
			connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
			q = connection.cursor()
			q.execute(f"SELECT * FROM list_bot where name = '{message.text}'")
			rows = q.fetchone()
			if rows != None:
				tomorrow = datetime.now()
				data = tomorrow.strftime('%d/%m/%Y')
				q.execute(f"SELECT COUNT(id) FROM ugc_users where bot = '{rows[6]}'")
				user_count = q.fetchone()[0]
				q.execute(f"SELECT COUNT(id) FROM ugc_users where bot = '{rows[6]}' and data = '{data}'")
				user_count_data = q.fetchone()[0]
				q.execute(f"SELECT COUNT(id) FROM list_zakaz where bot = '{rows[6]}'")
				zakaz_count = q.fetchone()[0]
				q.execute(f"SELECT COUNT(id) FROM list_zakaz where data = '{data}' and  bot = '{rows[6]}'")
				zakaz_count_data1 = q.fetchone()[0]
				q.execute(f"SELECT data FROM list_zakaz where bot = '{rows[6]}' ORDER BY id DESC LIMIT 1")
				try:
					oldzakaz = q.fetchone()[0]
				except Exception as e:
					oldzakaz = '–ù–µ—Ç'
				status = "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å" if rows[8] == "–†–∞–±–æ—Ç–∞–µ—Ç" else "üü¢ –í–∫–ª—é—á–∏—Ç—å"
				keyboard = types.InlineKeyboardMarkup()
				keyboard.add(types.InlineKeyboardButton(text=f'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å',callback_data=f'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å {rows[6]} block'),types.InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å',callback_data=f'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å {rows[6]} dell'))
				keyboard.add(types.InlineKeyboardButton(text='üí∞ –û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å',callback_data=f'–û–±–Ω–æ–≤–∏—Ç—å–±–∞–ª–∞–Ω—Å {rows[0]}'))	
				keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))	
				bot.send_message(message.chat.id, f'''<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
<b>‚îú–ë–æ—Ç:</b> @{rows[6]}	
<b>‚îú–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{user_count}</code>
<b>‚îî–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b> <code>{user_count_data}</code>

<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
<b>‚îú–ó–∞–∫–∞–∑–æ–≤:</b> <code>{zakaz_count} —à—Ç</code>
<b>‚îú–ó–∞–∫–∞–∑–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è :</b> <code>{zakaz_count_data1} —à—Ç</code>
<b>‚îî–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑:</b> <code>{oldzakaz}</code>

<b>üè¶–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:</b>
<b>‚îú–ù–∞—Ü–µ–Ω–∫–∞:</b> <code>{rows[5]} %</code>
<b>‚îú–ë–∞–ª–∞–Ω—Å:</b> <code>{rows[3]} RUB</code>
<b>‚îî–ü—Ä–∏–±—ã–ª—å:</b> <code>{rows[10]} RUB</code>''',parse_mode='HTML', reply_markup=keyboard)
			else:
				keyboard = types.InlineKeyboardMarkup()
				keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
				bot.send_message(message.chat.id, f'''‚úñÔ∏è –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –±–æ—Ç–∞.''',parse_mode='HTML', reply_markup=keyboard)
		# except:
		# 	pass
	else:
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		hideBoard = types.ReplyKeyboardRemove()
		msg = bot.send_message(message.chat.id, f'''‚è≥ –û—Ç–º–µ–Ω—è–µ–º.......''', reply_markup=hideBoard)
		bot.delete_message(message.from_user.id,msg.message_id)
		bot.send_message(message.chat.id, f'''‚úñÔ∏è –û—Ç–º–µ–Ω–∏–ª–∏.''',parse_mode='HTML', reply_markup=keyboard)

def minus_money(message,idsms):
	bot.delete_message(message.chat.id,message.message_id)
	bot.delete_message(message.chat.id,idsms)
	if message.text.lower() != '–æ—Ç–º–µ–Ω–∞':
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		q.execute("SELECT my_id_pay FROM geral_config  where id = "+str(1))
		my_id_pay = q.fetchone()[0]
		q.execute("SELECT my_key_pay FROM geral_config  where id = "+str(1))
		my_key_pay = q.fetchone()[0]
		summa = message.text.split('\n')[0]
		rekvizit = message.text.split('\n')[1]
		minus_money = requests.post(url='https://payok.io/api/payout_create',data={'API ID': my_id_pay, 'API KEY': str(my_key_pay), 'amount': float(summa), 'method': str(tip_vivod), 'reciever': str(rekvizit), 'comission_type': str('payment')})
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))	
		bot.send_message(message.chat.id, minus_money.text ,parse_mode='HTML', reply_markup=keyboard)
	else:
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üéõ –ú–µ–Ω—é',callback_data=f'–ú–µ–Ω—é'))
		hideBoard = types.ReplyKeyboardRemove()
		msg = bot.send_message(message.chat.id, f'''‚è≥ –û—Ç–º–µ–Ω—è–µ–º.......''', reply_markup=hideBoard)
		bot.delete_message(message.from_user.id,msg.message_id)
		bot.send_message(message.chat.id, f'''‚úñÔ∏è –û—Ç–º–µ–Ω–∏–ª–∏.''',parse_mode='HTML', reply_markup=keyboard)
@bot.callback_query_handler(func=lambda call: True)
def handler_call(call):
	a = call.data.split()
	if a[0] == '–ú–µ–Ω—é':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		msg = bot.send_message(call.message.chat.id, f'''‚è≥ –ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞.......''',parse_mode='HTML')
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		tomorrow = datetime.now()
		data = tomorrow.strftime('%d/%m/%Y')
		q.execute(f"SELECT COUNT(id) FROM ugc_users where bot = 'fast_smm'")
		user_count = q.fetchone()[0]
		q.execute(f"SELECT COUNT(id) FROM ugc_users where bot = 'fast_smm' and ref >= 1")
		user_count_ref = q.fetchone()[0]
		q.execute(f"SELECT DISTINCT id FROM ugc_users where bot != 'fast_smm'")
		user_unik = q.fetchall()
		q.execute(f"SELECT DISTINCT id FROM ugc_users where data = '{data}' and bot != 'fast_smm'")
		user_data = q.fetchall()
		q.execute(f"SELECT COUNT(id) FROM ugc_users where bot = 'fast_smm' and data = '{data}'")
		user_count_data = q.fetchone()[0]
		q.execute(f"SELECT COUNT(id) FROM list_bot")
		bot_count = q.fetchone()[0]
		q.execute(f"SELECT SUM(balance) FROM ugc_users")
		users_balance = q.fetchone()[0]
		q.execute(f"SELECT SUM(balance) FROM list_bot where balance >= '10'")
		bot_balance = q.fetchone()[0]
		q.execute(f"SELECT SUM(dohod) FROM list_bot")
		bot_dohod = q.fetchone()[0]
		q.execute(f"SELECT COUNT(id) FROM list_zakaz where data = '{data}'")
		zakaz_count_data = q.fetchone()[0]
		q.execute(f"SELECT COUNT(id) FROM list_zakaz")
		zakaz_count = q.fetchone()[0]
		date = datetime.today() - timedelta(days=1)
		date_minus = date.strftime("%d/%m/%Y")
		q.execute(f"SELECT COUNT(id) FROM list_zakaz where data = '{date_minus}'")
		zakaz_old_data = q.fetchone()[0]
		q.execute(f"SELECT COUNT(id) FROM list_bot where status = '–†–∞–±–æ—Ç–∞–µ—Ç'")
		bot_on = q.fetchone()[0]
		q.execute(f"SELECT COUNT(id) FROM list_bot where status = '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'")
		bot_block = q.fetchone()[0]
		q.execute(f"SELECT COUNT(id) FROM list_bot where status = '–í—ã–∫–ª—é—á–µ–Ω'")
		bot_off = q.fetchone()[0]
		q.execute("SELECT my_id_pay FROM geral_config  where id = "+str(1))
		my_id_pay = q.fetchone()[0]
		q.execute("SELECT my_key_pay FROM geral_config  where id = "+str(1))
		my_key_pay = q.fetchone()[0]
		q.execute(f"SELECT api_sms FROM geral_config where id = '1'")
		api_sms = q.fetchone()
		try:
			headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'}
			h = requests.post(f'https://smshub.org/stubs/handler_api.php?api_key={api_sms[0]}&action=getBalance', headers=headers)
			balancesms = str(h.text.split(":")[1])
		except:
			balancesms = '–û—à–∏–±–∫–∞ –∫–ª—é—á–∞'
		try:
			balancepayok = requests.post(url='https://payok.io/api/balance',data={'API ID': my_id_pay, 'API KEY': str(my_key_pay)}).json()['balance']
		except:
			balancepayok = '–û—à–∏–±–∫–∞ –∫–ª—é—á–∞'
		try:
			name = 'jopa'
			secret = '7a4ca73baf7bcb4f042d59c14e893ba158155fde'
			balancecase = requests.post(f'https://api.crystalpay.ru/v1/?s={secret}&n={name}&o=balance').json()['balance']
		except:
			balancecase = '–û—à–∏–±–∫–∞ –∫–ª—é—á–∞'
		try:
			apinakrutka2 = '8ee0e78bc65cd55fd117d9a37ef32932'
			zakazid = urllib.request.urlopen(f'https://partner.soc-proof.su/api/v2/?key={apinakrutka2}&action=balance').read()
			result = json.loads(zakazid.decode('utf8'))
			balanceservice = (result['balance'])
		except:
			balanceservice = '–û—à–∏–±–∫–∞ –∫–ª—é—á–∞'
		q.execute(f"SELECT COUNT(id) FROM support where status = '2'")
		support_count = q.fetchone()[0]
		q.execute(f"SELECT COUNT(id) FROM vivod where status = 'WAIT'")
		viplata_count = q.fetchone()[0]
		q.execute(f"SELECT COUNT(id) FROM reviews")
		reviews_count = q.fetchone()[0]
		q.execute(f"SELECT COUNT(id) FROM list_zakaz_shop")
		tovar_count_count = q.fetchone()[0]
		q.execute(f"SELECT SUM(prace) FROM list_zakaz_shop")
		sum_count_count = q.fetchone()[0]
		q.execute(f"SELECT SUM(summa) FROM vivod where status = 'DONE'")
		sumviplata = q.fetchone()[0]
		q.execute(f"SELECT COUNT(id) FROM list_aktiv where code != '–ù–µ—Ç'")
		sms_count = q.fetchone()[0]
		if sms_count == None:
			sms_count = 0
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database='h159987_bbb1')
		q = connection.cursor()
		q.execute(f"SELECT COUNT(id) FROM tovar where status = 'DONE'")
		tovar_count = q.fetchone()[0]
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',callback_data=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'),types.InlineKeyboardButton(text='ü§ñ –ë–æ—Ç—ã',callback_data=f'–ë–æ—Ç—ã'),types.InlineKeyboardButton(text='üõç –£—Å–ª—É–≥–∏',callback_data=f'–î–æ–±–∞–≤–ª–µ–Ω–∏–µ'))
		keyboard.add(types.InlineKeyboardButton(text=f'üì¢ –ü—Ä–æ–º–æ',callback_data=f'–ü—Ä–æ–º–æ—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),types.InlineKeyboardButton(text='üí¨ –†–∞—Å—Å—ã–ª–∫–∞',callback_data=f'–†–∞—Å—Å—ã–ª–∫–∞'))
		keyboard.add(types.InlineKeyboardButton(text=f'‚ÅâÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞ ({support_count})',callback_data=f'–ü–æ–¥–¥–µ—Ä–∂–∫–∞'),types.InlineKeyboardButton(text=f'üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏',callback_data=f'–ù–∞—Å—Ç—Ä–æ–π–∫–∏'))
		keyboard.add(types.InlineKeyboardButton(text=f'–î–æ—Ö–æ–¥ –±–æ—Ç–æ–≤', callback_data=f'–î–æ—Ö–æ–¥'))
		keyboard.add(types.InlineKeyboardButton(text=f'‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ',callback_data=f'–ú–µ–Ω—é'))
		text = f'''<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–µ—Ä–≤–∏—Å—É:</b>
<b>‚îú–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å–µ—Ä–≤–∏—Å–∞:</b> <code>{user_count} / {user_count_ref}</code>
<b>‚îú–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã —Å–µ—Ä–≤–∏—Å–∞:</b> <code>{user_count_data}</code>
<b>‚îú–ë–æ—Ç–æ–≤:</b> <code>{bot_count} —à—Ç</code> 
<b>‚îú–ë–æ—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ:</b> <code>{bot_on} —à—Ç</code>
<b>‚îú–ë–æ—Ç–æ–≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ:</b> <code>{bot_block} —à—Ç</code>
<b>‚îú–ë–æ—Ç–æ–≤ –≤—ã–∫–ª—é—á–µ–Ω–æ:</b> <code>{bot_off} —à—Ç</code>
<b>‚îú–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{len(user_unik)}</code>
<b>‚îú–ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{len(user_data)}</code>

<b>‚ÑπÔ∏è –§–∏–Ω–∞–Ω—Å—ã –±–æ—Ç–æ–≤:</b>
<b>‚îú–î–æ—Ö–æ–¥ –±–æ—Ç–æ–≤:</b> <code>{bot_dohod} RUB</code>
<b>‚îú–ë–∞–ª–∞–Ω—Å –±–æ—Ç–æ–≤:</b> <code>{bot_balance} RUB</code>
<b>‚îú–°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç:</b> <code>{sumviplata} RUB</code> 
<b>‚îî–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{users_balance} RUB</code>

<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–∫–∞–∑–∞–º:</b>
<b>‚îú–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:</b> <code>{zakaz_count} —à—Ç</code>
<b>‚îú–ó–∞–∫–∞–∑–æ–≤ –≤—á–µ—Ä–∞:</b> <code>{zakaz_old_data} —à—Ç</code>
<b>‚îú–ó–∞–∫–∞–∑–æ–≤ —Å–µ–≥–æ–¥–Ω—è:</b> <code>{zakaz_count_data} —à—Ç</code>
<b>‚îú–ü—Ä–∏–Ω—è—Ç–æ —Å–º—Å:</b> <code>{sms_count} —à—Ç</code> 
<b>‚îú–ë–∞–ª–∞–Ω—Å –º–µ—Ä—á–∞:</b> <code>{balancepayok} RUB</code>
<b>‚îú–ë–∞–ª–∞–Ω—Å —Å–º—Å:</b> <code>{balancesms} RUB</code> 
<b>‚îî–ë–∞–ª–∞–Ω—Å –Ω–∞–∫—Ä—É—Ç–∫–∏:</b> <code>{balanceservice} RUB </code>

'''
		#<b>‚îî–ë–∞–ª–∞–Ω—Å –∫–∞—Å—Å—ã:</b> <code>{balancecase} RUB</code>
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg.message_id, text=text, parse_mode='HTML', reply_markup=keyboard)
	
	if a[0] == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏':
		if call.message.chat.id == 2037657499:
			bot.delete_message(call.message.chat.id,call.message.message_id)
			connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
			q = connection.cursor()
			text = f"<b>üíå –û—Ç–∑—ã–≤—ã :\n</b>"
			# q.execute(f'SELECT * FROM reviews ORDER BY id DESC LIMIT 10')
			# rows = q.fetchall()
			# for i in rows:
			# 	text += f"@{i[1]} <b>|</b> <code>{i[2]}</code> <b>|</b> @{i[4]}\n"
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'''–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ''',callback_data=f'–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ'),types.InlineKeyboardButton(text=f'''–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞''',callback_data=f'–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞'))
			keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'),types.InlineKeyboardButton(text=f'''–û—Ç–∫–ª—é—á–µ–Ω–∏–µ''',callback_data=f'–û—Ç–∫–ª—é—á–µ–Ω–∏–µ'))
			bot.send_message(call.message.chat.id, text ,parse_mode='HTML', reply_markup=keyboard)
	if a[0] == '–†–∞—Å—Å—ã–ª–∫–∞':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		msg = bot.send_message(call.message.chat.id, f'''‚è≥ –ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞.......''',parse_mode='HTML')
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		text = f"<b>üèÜ–¢–æ–ø –±–æ—Ç–æ–≤ –ø–æ –¥–æ—Ö–æ–¥—É:\n</b>"
		q.execute(f'SELECT * FROM list_bot ORDER BY dohod DESC')
		rows = q.fetchall()
		l = len(rows)
		if l > 20:
			l = 20
		for i in range(l):
			q.execute(f"SELECT COUNT(id) FROM ugc_users where bot = '{rows[i][6]}'")
			user = q.fetchone()[0]
			text += f"@{rows[i][6]} <b>|</b> <code>{rows[i][10]} RUB</code> <b>|</b> <code>{user} USER</code>\n"
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'''‚ö°Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É''',callback_data=f'–ó–∞–ø—É—Å—Ç–∏—Ç—å'))
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg.message_id, text=text, parse_mode='HTML', reply_markup=keyboard)

	if a[0] == '–ó–∞–ø—É—Å—Ç–∏—Ç—å':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'''‚ñ™Ô∏è –í –Ω—É–∂–Ω–æ–º –±–æ—Ç–µ''',callback_data=f'–Ω—É–∂–Ω–æ–º'))
		keyboard.add(types.InlineKeyboardButton(text=f'''‚ñ™Ô∏è –í –≤—Å–µ—Ö –±–æ—Ç–∞—Ö''',callback_data=f'–≤–æ–≤—Å–µ—Ö'))
		#keyboard.add(types.InlineKeyboardButton(text=f'''‚ñ™Ô∏è –ü–ª–∞—Ç–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞''',callback_data=f'–ø–ª–∞—Ç–Ω–∞—è—Ä–∞—Å—Å—ã–ª–∫–∞'))
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))
		bot.send_message(call.message.chat.id, f'''‚ñ™Ô∏è  –ì–¥–µ –±—É–¥–µ–º —Ä–∞—Å—Å—ã–ª–∞—Ç—å ?!''',parse_mode='HTML', reply_markup=keyboard)

	if a[0] == '–≤–æ–≤—Å–µ—Ö':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		msg = bot.send_message(call.message.chat.id, f'''‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –≤—Å–µ–π –±–∞–∑–µ:''',parse_mode='HTML', reply_markup=keyboards.otmena)
		bot.register_next_step_handler(msg, sendgoallbase ,msg.message_id)

	if a[0] == '–Ω—É–∂–Ω–æ–º':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		msg = bot.send_message(call.message.chat.id, f'''‚úçÔ∏è  –£–∫–∞–∂–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞ (–ë–µ–∑ @):''',parse_mode='HTML', reply_markup=keyboards.otmena)
		bot.register_next_step_handler(msg, sendall,msg.message_id)

	if a[0] == '—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		msg = bot.send_message(call.message.chat.id, f'''‚è≥ –ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞.......''',parse_mode='HTML')
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		q.execute("SELECT my_id_pay FROM geral_config  where id = "+str(1))
		my_id_pay = q.fetchone()[0]
		q.execute("SELECT my_key_pay FROM geral_config  where id = "+str(1))
		my_key_pay = q.fetchone()[0]
		payok = requests.post(url='https://payok.io/api/transaction',data={'API ID': my_id_pay, 'API KEY': str(my_key_pay), 'shop': 579}).json()
		rows = [10,9,8,7,5,4,3,2,1]
		text = ''
		for i in rows:
			status = "–í –æ–∂–∏–¥–∞–Ω–∏–∏" if payok[f"{i}"]["transaction_status"] == "0" else "–£—Å–ø–µ—à–Ω–∞—è –≤—ã–ø–ª–∞—Ç–∞"
			desc = payok[f"{i}"]["description"]
			bot_name = desc.split("@")[1].split(":")[0]
			user_id = desc.split("@")[1].split(":")[1]
			text += F'''‚ÑπÔ∏è <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:</b> <code>{payok[f"{i}"]["transaction"]}</code>
<b>‚îú UI:</b> <code>{payok[f"{i}"]["payment_id"]}</code>
<b>‚îú Amount:</b> <code>{payok[f"{i}"]["amount_profit"]}</code>
<b>‚îú Method:</b> <code>{payok[f"{i}"]["method"]}</code>
<b>‚îú Status:</b> <code>{status}</code>
<b>‚îú User:</b> <code>{user_id}</code>
<b>‚îî Bot:</b> @{bot_name}\n\n'''
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üí≤ –î–æ—Ö–æ–¥ –±–æ—Ç–∞',callback_data=f'–î–æ—Ö–æ–¥'))
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg.message_id, text=text, parse_mode='HTML', reply_markup=keyboard)


	if a[0] == '–î–æ—Ö–æ–¥':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		q.execute("SELECT * FROM dohod where id = '1'")
		rows = q.fetchone()
		dohods = float(rows[2])
		rashods = float(rows[1]) - float(rows[3])
		if rashods < 0:
			rashods = 0

		dohod = float(dohods) - float(rashods) - float(rows[5])

		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥',callback_data=f'–û–±–Ω–æ–≤–∏—Ç—å dohod'))
		keyboard.add(types.InlineKeyboardButton(text=f'‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ø —Ä–∞—Å—Ö–æ–¥',callback_data=f'–û–±–Ω–æ–≤–∏—Ç—å doprashod'))
		keyboard.add(types.InlineKeyboardButton(text=f'‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥—ã',callback_data=f'–û–±–Ω–æ–≤–∏—Ç—å obnova'),types.InlineKeyboardButton(text=f'üî∞ –°–±—Ä–æ—Å–∏—Ç—å',callback_data=f'–û–±–Ω–æ–≤–∏—Ç—å sbros'))
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))
		bot.send_message(call.message.chat.id, f'''<b>üí∞ –î–æ—Ö–æ–¥ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:</b> <code>{dohod} RUB</code>''',parse_mode='HTML', reply_markup=keyboard)
	
	if a[0] == '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å_':
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()

		q.execute(f"SELECT status FROM ugc_users where id = '{a[1]}' and bot = '{a[2]}'")
		status = q.fetchone()[0]

		if status == '–ê–∫—Ç–∏–≤–µ–Ω':
			q.execute(f"update ugc_users set status = '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' where id = '{a[1]}' and bot = '{a[2]}'")
			connection.commit()
			bot.answer_callback_query(callback_query_id=call.id, text="‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
		else:
			q.execute(f"update ugc_users set status = '–ê–∫—Ç–∏–≤–µ–Ω' where id = '{a[1]}' and bot = '{a[2]}'")
			connection.commit()
			bot.answer_callback_query(callback_query_id=call.id, text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
				
	if a[0] == '–û–±–Ω–æ–≤–∏—Ç—å':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		if str(a[1]) == 'dohod':
			msg = bot.send_message(call.message.chat.id, f'''‚úçÔ∏è  –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É:''',parse_mode='HTML', reply_markup=keyboards.otmena)
			bot.register_next_step_handler(msg, editdohod,msg.message_id, a[1])
		if str(a[1]) == 'doprashod':
			msg = bot.send_message(call.message.chat.id, f'''‚úçÔ∏è  –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É:''',parse_mode='HTML', reply_markup=keyboards.otmena)
			bot.register_next_step_handler(msg, editdohod,msg.message_id, a[1])
		if str(a[1]) == 'obnova':
			rashod = float(0)
			msg = bot.send_message(call.message.chat.id, f'''‚è≥ –ò–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è.......''',parse_mode='HTML')
			connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
			q = connection.cursor()
			q.execute("SELECT api_partner FROM geral_config  where id = "+str(1))
			#apinakrutka = q.fetchone()[0]
			apinakrutka = '8ee0e78bc65cd55fd117d9a37ef32932'
			q.execute(f'SELECT * FROM list_zakaz')
			row = q.fetchall()
			for i in row:
				colco = i[7]
				parameters = {'key': apinakrutka,'action': 'status','order': colco}
				h = requests.post('https://partner.soc-proof.su/api/v2', params=parameters).json()
				rashod += float(h['charge'])
			q.execute(f"update dohod set rashod = '{rashod}' WHERE id = '1'")
			connection.commit()
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–î–æ—Ö–æ–¥'))
			bot.edit_message_text(chat_id=call.message.chat.id, message_id=msg.message_id, text='''‚úîÔ∏è –†–∞—Å—Ö–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã''', parse_mode='HTML', reply_markup=keyboard)
		if str(a[1]) == 'sbros':
			connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
			q = connection.cursor()
			q.execute("SELECT * FROM dohod where id = '1'")
			rows = q.fetchone()
			q.execute(f"update dohod set oldrashod = oldrashod + '{rows[1]}' WHERE id = '1'")
			connection.commit()
			q.execute(f"update dohod set oldrashod = oldrashod + '{rows[5]}' WHERE id = '1'")
			connection.commit()
			q.execute(f"update dohod set olddohod = olddohod + '{rows[2]}' WHERE id = '1'")
			connection.commit()
			q.execute(f"update dohod set rashod = '0' WHERE id = '1'")
			connection.commit()
			q.execute(f"update dohod set doprashod = '0' WHERE id = '1'")
			connection.commit()
			q.execute(f"update dohod set dohod = '0' WHERE id = '1'")
			connection.commit()
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–î–æ—Ö–æ–¥'))
			bot.send_message(call.message.chat.id, f'''‚úîÔ∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø—Ä–æ—à–ª–æ–µ –≤—Ä–µ–º—è —Å–±—Ä–æ—à–µ–Ω–∞''',parse_mode='HTML', reply_markup=keyboard)
	
	if a[0] == '–ò—Å—Ç–æ—Ä–∏—è':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		q.execute(f"SELECT * FROM support where user = '{a[1]}'")
		row = q.fetchall()
		text = ''
		for i in row:
			text += f'<b>‚îú‚ñ™Ô∏è:</b> <code>{i[2]}</code>\n'

		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å',callback_data=f'–û—Ç–≤–µ—Ç–∏—Ç—å {i[0]}'),types.InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å',callback_data=f'–£–¥–∞–ª–∏—Ç—å–∑–∞–ø—Ä–æ—Å {i[0]}'))
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))
		bot.send_message(call.message.chat.id, f'''<b>‚ÑπÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>
{text}<b>‚îî–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> <code>{len(row)}</code>''',parse_mode='HTML', reply_markup=keyboard)
	if a[0] == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		q.execute(f"SELECT * FROM support where status = '2' ORDER BY id DESC LIMIT 1")
		rows = q.fetchone()
		if rows != None:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text='üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å',callback_data=f'–û—Ç–≤–µ—Ç–∏—Ç—å {rows[0]}'),types.InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å',callback_data=f'–£–¥–∞–ª–∏—Ç—å–∑–∞–ø—Ä–æ—Å {rows[0]}'))
			keyboard.add(types.InlineKeyboardButton(text=f'üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤',callback_data=f'–ò—Å—Ç–æ—Ä–∏—è {rows[1]}'))
			keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))
			bot.send_message(call.message.chat.id, f'''<b>‚ÑπÔ∏è –ë–æ—Ç:</b> @{rows[4]}
<b>‚îú–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> <code>{rows[1]}</code>
<b>‚îî–í–æ–ø—Ä–æ—Å:</b> <code>{rows[2]}</code>''',parse_mode='HTML', reply_markup=keyboard)
		else:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))
			bot.send_message(call.message.chat.id, f'''üòä –ó–∞–ø—Ä–æ—Å—ã –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.''',parse_mode='HTML', reply_markup=keyboard)

	if a[0] == '–û—Ç–≤–µ—Ç–∏—Ç—å':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		msg = bot.send_message(call.message.chat.id, f'''‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:''',parse_mode='HTML', reply_markup=keyboards.otmena)
		bot.register_next_step_handler(msg, support_otvet, msg.message_id, a[1])
				
	if a[0] == '–£–¥–∞–ª–∏—Ç—å–∑–∞–ø—Ä–æ—Å':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		q.execute(f"update support set status = '0' where id = '{a[1]}'")
		connection.commit()
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ü–æ–¥–¥–µ—Ä–∂–∫–∞'))
		bot.send_message(call.message.chat.id, f'''‚úîÔ∏è –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.''',parse_mode='HTML', reply_markup=keyboard)


	if a[0] == '–í—ã–ø–ª–∞—Ç—ã':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		q.execute(f"SELECT * FROM vivod where status = 'WAIT' ORDER BY id DESC LIMIT 1")
		rows = q.fetchone()
		if rows != None:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',callback_data=f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å {rows[0]}'),types.InlineKeyboardButton(text=f'‚ùå –û—Ç–º–µ–Ω–∏—Ç—å',callback_data=f'–û—Ç–º–µ–Ω–∏—Ç—å {rows[0]}'))
			keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))
			bot.send_message(call.message.chat.id, f'''<b>‚ÑπÔ∏è –í—ã–ø–ª–∞—Ç—ã:</b>
<b>‚îúUID:</b> <code>{rows[2]}</code>
<b>‚îú–ë–æ—Ç:</b> <code>{rows[1]}</code>
<b>‚îú–°–∏—Å—Ç–µ–º–∞:</b> <code>{rows[3]}</code>
<b>‚îú–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b> <code>{rows[5]}</code>
<b>‚îî–°—É–º–º–∞:</b> <code>{rows[4]}</code>''',parse_mode='HTML', reply_markup=keyboard)
		else:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))
			bot.send_message(call.message.chat.id, f'''üòä –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤—ã–ø–ª–∞—Ç—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.''',parse_mode='HTML', reply_markup=keyboard)

	if a[0] == '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		q.execute(f"SELECT * FROM vivod where status = 'WAIT' and ID = '{a[1]}'")
		vivods = q.fetchone()
		q.execute(f"update vivod set status = 'DONE' where id = '{a[1]}'")
		connection.commit()
		try:
			botss = telebot.TeleBot(config.bot_token)
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text='üíå –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ üíå',callback_data=f'–û—Å—Ç–∞–≤–∏—Ç—å–æ—Ç–∑—ã–≤ '))
			botss.send_message(vivods[2], f'''<b>‚úÖ –î–µ–Ω—å–≥–∏ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ {vivods[3]}:</b> <code>{vivods[5]}</code>
‚îî<i>–ù–∞–º –±—ã–ª–æ –±—ã–ª–æ –±—ã –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, –µ—Å–ª–∏ –±—ã –≤—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤!</i>''',parse_mode='HTML', reply_markup=keyboard)
		except:
			pass
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–í—ã–ø–ª–∞—Ç—ã'))
		bot.send_message(call.message.chat.id, f'''<b>‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—ã–ø–ª–∞—Ç—É –Ω–∞ {vivods[3]}:</b> <code>{vivods[5]}</code>''',parse_mode='HTML', reply_markup=keyboard)

	if a[0] == '–û—Ç–º–µ–Ω–∏—Ç—å':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		q.execute(f"SELECT * FROM vivod where status = 'WAIT' and ID = '{a[1]}'")
		vivods = q.fetchone()
		q.execute(f"update vivod set status = 'FALSE' where id = '{a[1]}'")
		connection.commit()
		q.execute(f"update list_bot set balance = balance + '{vivods[4]}' where bot = '{vivods[1]}'")
		connection.commit()
		try:
			botss = telebot.TeleBot(config.bot_token)
			botss.send_message(vivods[2], f'''<b>‚úñÔ∏è –û—à–∏–±–∫–∞ –≤—ã–ø–ª–∞—Ç—ã, –¥–µ–Ω—å–≥–∏ –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã.</b>''',parse_mode='HTML')
		except:
			pass
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–í—ã–ø–ª–∞—Ç—ã'))
		bot.send_message(call.message.chat.id, f'''<b>‚úñÔ∏è  –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –≤—ã–ø–ª–∞—Ç—É –Ω–∞ {vivods[3]}:</b> <code>{vivods[5]}</code>''',parse_mode='HTML', reply_markup=keyboard)

	if a[0] == '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		msg = bot.send_message(call.message.chat.id, f'''‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ un –±–æ—Ç–∞ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:''',parse_mode='HTML', reply_markup=keyboards.otmena)
		bot.register_next_step_handler(msg, poisk_user_admin, msg.message_id)

	if a[0] == '–î–æ–±–∞–≤–∏—Ç—å–±–∞–ª–∞–Ω—Å':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		msg = bot.send_message(call.message.chat.id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –±–∞–ª–∞–Ω—Å–∞:",parse_mode='HTML', reply_markup=keyboards.otmena)
		bot.register_next_step_handler(msg, addbalance, a[1],a[2], msg.message_id)

	if a[0] == '–û–±–Ω–æ–≤–∏—Ç—å–±–∞–ª–∞–Ω—Å':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		msg = bot.send_message(call.message.chat.id, "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –±–∞–ª–∞–Ω—Å–∞:",parse_mode='HTML', reply_markup=keyboards.otmena)
		bot.register_next_step_handler(msg, addbalancebot, a[1], msg.message_id)

	if a[0] == '–ë–æ—Ç—ã':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		msg = bot.send_message(call.message.chat.id, f'''‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ un –±–æ—Ç–∞:''',parse_mode='HTML', reply_markup=keyboards.otmena)
		bot.register_next_step_handler(msg, poisk_bot, msg.message_id)

	if a[0] == '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å':
		print(a[1])
		bot.delete_message(call.message.chat.id,call.message.message_id)
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		if str(a[2]) == 'block':
			date = datetime.today() + timedelta(days=3)
			date_plus_3 = date.strftime("%d/%m/%Y")
			q.execute(f"update list_bot set status = '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' WHERE bot = '{a[1]}'")
			connection.commit()
			q.execute(f"update list_bot set logi = '{date_plus_3}' WHERE bot = '{a[1]}'")
			connection.commit()
			cmd = f'systemctl stop {a[1]}'
			subprocess.Popen(cmd, shell=True)
			cmd1 = f'systemctl disable {a[1]}'
			subprocess.Popen(cmd1, shell=True)
		if str(a[2]) == 'dell':
			q.execute(f"DELETE FROM list_bot where bot = '{a[1]}'")
			connection.commit()
			path = os.path.join('/etc/systemd/system/', f'{a[1]}.service')
			os.remove(path)
			shutil.rmtree(f'/root/smm/bot_list/{a[1]}')
			cmd = f'systemctl stop {a[1]}'
			subprocess.Popen(cmd, shell=True)
			cmd1d = f'systemctl disable {a[1]}'
			subprocess.Popen(cmd1d, shell=True)
			cmds = f'systemctl daemon-reload'
			subprocess.Popen(cmds, shell=True)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))
		bot.send_message(call.message.chat.id, f'''‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.''',parse_mode='HTML', reply_markup=keyboard)

	if a[0] == '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		keyboard = types.InlineKeyboardMarkup()
		q.execute(f"SELECT * FROM category")
		rows = q.fetchall()
		for i in rows:
			keyboard.add(types.InlineKeyboardButton(text=i[0], callback_data=f'—Ä–∞–∑–¥–µ–ª {i[1]}'))
		keyboard.add(types.InlineKeyboardButton(text=f'‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é',callback_data=f'–î–æ–±–∞–≤–∏—Ç—å s categor'))
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))
		bot.send_message(call.message.chat.id, f'''‚ñ™Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é''',parse_mode='HTML', reply_markup=keyboard)

	if a[0] == '—Ä–∞–∑–¥–µ–ª':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		keyboard = types.InlineKeyboardMarkup()
		q.execute(f"SELECT * FROM sub_category where category = '{a[1]}'")
		rows = q.fetchall()
		for i in rows:
			keyboard.add(types.InlineKeyboardButton(text=i[0],callback_data=f'item_ {i[2]} {a[1]}'))
		keyboard.add(types.InlineKeyboardButton(text=f'‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª',callback_data=f'–î–æ–±–∞–≤–∏—Ç—å {a[1]} razdel'))
		keyboard.add(types.InlineKeyboardButton(text=f'üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é',callback_data=f'–£–¥–∞–ª–∏—Ç—å {a[1]} categor'))
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–î–æ–±–∞–≤–ª–µ–Ω–∏–µ'))
		bot.send_message(call.message.chat.id, f'''‚ñ™Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é''',parse_mode='HTML', reply_markup=keyboard)

	if a[0] == 'item_':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		keyboard = types.InlineKeyboardMarkup()
		q.execute(f"SELECT * FROM item where sub_category = '{a[1]}'")
		rows = q.fetchall()
		for i in rows:
			q.execute(f"SELECT * FROM item where item_id = '{i[8]}'")
			rowss = q.fetchone()
			keyboard.add(types.InlineKeyboardButton(text=f'{i[0]} | {rowss[3]} RUB',callback_data=f'usluga_ {i[8]} {a[1]}'))
		keyboard.add(types.InlineKeyboardButton(text=f'‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É',callback_data=f'–î–æ–±–∞–≤–∏—Ç—å {a[1]} usluga'))
		keyboard.add(types.InlineKeyboardButton(text=f'üóë –£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª',callback_data=f'–£–¥–∞–ª–∏—Ç—å {a[1]} razdel'))
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'—Ä–∞–∑–¥–µ–ª {a[2]} {a[1]}'))
		bot.send_message(call.message.chat.id, f'''‚ñ™Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—É—é''',parse_mode='HTML', reply_markup=keyboard)

	if a[0] == 'usluga_':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'üñä –ò–∑–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É',callback_data=f'–ò–∑–º–µ–Ω–∏—Ç—å {a[1]}'),types.InlineKeyboardButton(text=f'üóë –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É',callback_data=f'–£–¥–∞–ª–∏—Ç—å {a[1]} usluga'))
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'item_ {a[2]} {a[1]}'))
		q.execute(f"SELECT * FROM item where item_id = '{a[1]}'")
		rows = q.fetchone()
		bot.send_message(call.message.chat.id, f'''üì¶<b>–£—Å–ª—É–≥–∞:</b> <code>{rows[0]}</code> 
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üìú<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> 
<code>{rows[7]}</code>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üì•<b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–∞: {rows[4]}</b> 
üì§<b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {rows[5]}</b> 
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
üí≥<b>–¶–µ–Ω–∞ –∑–∞ 1000: </b> <b>{rows[3]} RUB</b>''',parse_mode='HTML', reply_markup=keyboard)

	if a[0] == '–ò–∑–º–µ–Ω–∏—Ç—å':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'–ù–∞–∑–≤–∞–Ω–∏–µ',callback_data=f'–ò–∑–º–µ–Ω–∏—Ç—å—É—Å–ª—É–≥–∞ {a[1]} name'),types.InlineKeyboardButton(text=f'–û–ø–∏—Å–∞–Ω–∏–µ',callback_data=f'–ò–∑–º–µ–Ω–∏—Ç—å—É—Å–ª—É–≥–∞ {a[1]} item_desc'))
		keyboard.add(types.InlineKeyboardButton(text=f'–ú–∏–Ω',callback_data=f'–ò–∑–º–µ–Ω–∏—Ç—å—É—Å–ª—É–≥–∞ {a[1]} min'),types.InlineKeyboardButton(text=f'–ú–∞–∫—Å',callback_data=f'–ò–∑–º–µ–Ω–∏—Ç—å—É—Å–ª—É–≥–∞ {a[1]} max'))
		keyboard.add(types.InlineKeyboardButton(text=f'–¶–µ–Ω–∞ –∑–∞ 1000',callback_data=f'–ò–∑–º–µ–Ω–∏—Ç—å—É—Å–ª—É–≥–∞ {a[1]} cost'),types.InlineKeyboardButton(text=f'id service',callback_data=f'–ò–∑–º–µ–Ω–∏—Ç—å—É—Å–ª—É–≥–∞ {a[1]} service_id'))
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))
		bot.send_message(call.message.chat.id, f'''‚ñ™Ô∏è –ß—Ç–æ –±—É–¥–µ–º –º–µ–Ω—è—Ç—å ?''',parse_mode='HTML', reply_markup=keyboard)

	if a[0] == '–ò–∑–º–µ–Ω–∏—Ç—å—É—Å–ª—É–≥–∞':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		msg = bot.send_message(call.message.chat.id, f'''‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:''',parse_mode='HTML', reply_markup=keyboards.otmena)
		bot.register_next_step_handler(msg, editusluga, msg.message_id, a[1], a[2])

	if a[0] == '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ':
		if call.message.chat.id == 949877052:
			keyboard = types.InlineKeyboardMarkup()
			keyboard.add(types.InlineKeyboardButton(text=f'üî∞ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞',callback_data=f'–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞'))
			bot.delete_message(call.message.chat.id,call.message.message_id)
			msg = bot.send_message(call.message.chat.id, f'''‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–π–ª main.py:''',parse_mode='HTML', reply_markup=keyboard)
			bot.register_next_step_handler(msg, obnovabot, msg.message_id)

	if a[0] == '–î–æ–±–∞–≤–∏—Ç—å':

		if str(a[2]) == 'categor':
			bot.delete_message(call.message.chat.id,call.message.message_id)
			msg = bot.send_message(call.message.chat.id, f'''‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:''',parse_mode='HTML', reply_markup=keyboards.otmena)
			bot.register_next_step_handler(msg, add_categor, msg.message_id)

		if str(a[2]) == 'razdel':
			bot.delete_message(call.message.chat.id,call.message.message_id)
			msg = bot.send_message(call.message.chat.id, f'''‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞:''',parse_mode='HTML', reply_markup=keyboards.otmena)
			bot.register_next_step_handler(msg, add_razdel, msg.message_id,a[1])

		if str(a[2]) == 'usluga':
			bot.delete_message(call.message.chat.id,call.message.message_id)
			msg = bot.send_message(call.message.chat.id, f'''‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:''',parse_mode='HTML', reply_markup=keyboards.otmena)
			bot.register_next_step_handler(msg, add_usluga_1, msg.message_id, a[1])

	if a[0] == '–í—ã–≤–æ–¥':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'''‚ñ™Ô∏è Qiwi''',callback_data='–≤—ã–≤–µ—Å—Ç–∏ qiwi'),types.InlineKeyboardButton(text=f'''‚ñ™Ô∏è Card''',callback_data='–≤—ã–≤–µ—Å—Ç–∏ card'),types.InlineKeyboardButton(text=f'''‚ñ™Ô∏è Yoomoney''',callback_data='–≤—ã–≤–µ—Å—Ç–∏ yoomoney'))
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))
		bot.send_message(call.message.chat.id, f'''‚ñ™Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ –±–∞–ª–∞–Ω—Å–∞:''',parse_mode='HTML', reply_markup=keyboard)

	if a[0] == '–≤—ã–≤–µ—Å—Ç–∏':
		global tip_vivod
		tip_vivod = a[1]
		bot.delete_message(call.message.chat.id,call.message.message_id)
		msg = bot.send_message(call.message.chat.id, f'''‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏:''',parse_mode='HTML', reply_markup=keyboards.otmena)
		bot.register_next_step_handler(msg, minus_money, msg.message_id)
				
	if a[0] == '–£–¥–∞–ª–∏—Ç—å':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		if str(a[2]) == 'categor':
			connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
			q = connection.cursor()
			q.execute(f"DELETE FROM category where cat_id = '{a[1]}'")
			connection.commit()

		if str(a[2]) == 'razdel':
			connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
			q = connection.cursor()
			q.execute(f"DELETE FROM sub_category where sub_id = '{a[1]}'")
			connection.commit()

		if str(a[2]) == 'usluga':
			connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
			q = connection.cursor()
			q.execute(f"DELETE FROM item where item_id = '{a[1]}'")
			connection.commit()

		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))
		bot.send_message(call.message.chat.id, f'''‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.''',parse_mode='HTML', reply_markup=keyboard)

	if a[0] == 'timeupdate':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_avtopost)
		q = connection.cursor()
		q.execute(f"SELECT * FROM list_chat where data >= '1'")
		row = q.fetchall()
		for i in row:
			try:
				print(i[6])
				dates = datetime.today() + timedelta(minutes=int(i[6]))
				dates = dates.strftime("%H:%M")
				q.execute(f"update list_chat set data = '{dates}' where id = '{i[0]}'")
				connection.commit()
			except Exception as e:
				print(e)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))
		bot.send_message(call.message.chat.id, f'''‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.''',parse_mode='HTML', reply_markup=keyboard)

	if a[0] == '–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		q.execute(f"SELECT * FROM list_bot")
		rows = q.fetchall()
		for i in rows:
			name = i[6]
			cmd = f'systemctl restart {name}'
			subprocess.Popen(cmd, shell=True)
		cmd = 'systemctl restart bot'
		cmd1 = 'systemctl restart bot_auch'
		cmd2 = 'systemctl restart check'
		cmd7 = 'systemctl restart bot_admin'
		subprocess.Popen(cmd1, shell=True)
		subprocess.Popen(cmd2, shell=True)
		subprocess.Popen(cmd, shell=True)
		subprocess.Popen(cmd7, shell=True)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))
		bot.send_message(call.message.chat.id, f'''‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.''',parse_mode='HTML', reply_markup=keyboard)

	if a[0] == '–ü–µ—Ä–µ–∑–∞–≥2':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		cmd = 'systemctl restart gg_post_bot'
		cmd1 = 'systemctl restart gg_post_check'
		cmd2 = 'systemctl restart gg_post_send'
		cmd3 = 'systemctl restart gg_post_podpiska'
		cmd4 = 'systemctl restart BomberBotCheck'
		cmd7 = 'systemctl restart BomberBot'
		subprocess.Popen(cmd, shell=True)
		subprocess.Popen(cmd1, shell=True)
		subprocess.Popen(cmd2, shell=True)
		subprocess.Popen(cmd3, shell=True)
		subprocess.Popen(cmd4, shell=True)
		subprocess.Popen(cmd7, shell=True)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))
		bot.send_message(call.message.chat.id, f'''‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.''',parse_mode='HTML', reply_markup=keyboard)

	if a[0] == '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		q.execute(f"SELECT * FROM list_bot")
		rows = q.fetchall()
		for i in rows:
			name = i[6]
			cmd = f'systemctl stop {name}'
			subprocess.Popen(cmd, shell=True)
		cmd = 'systemctl stop bot'
		cmd1 = 'systemctl stop bot_auch'
		cmd2 = 'systemctl stop check'
		cmd3 = 'systemctl stop check2'
		cmd4 = 'systemctl stop check3'
		subprocess.Popen(cmd1, shell=True)
		subprocess.Popen(cmd2, shell=True)
		subprocess.Popen(cmd3, shell=True)
		subprocess.Popen(cmd4, shell=True)
		subprocess.Popen(cmd, shell=True)
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))
		bot.send_message(call.message.chat.id, f'''‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.''',parse_mode='HTML', reply_markup=keyboard)
			
	if a[0] == '–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_avtopost)
		q = connection.cursor()
		q.execute(f"SELECT COUNT(id) FROM ugc_users")
		user_count = q.fetchone()[0]
		q.execute(f"SELECT COUNT(id) FROM ugc_users where data >= 1")
		podpiska_count = q.fetchone()[0]
		q.execute(f"SELECT COUNT(id) FROM list_chat where status = 'Send'")
		chats_count_send = q.fetchone()[0]
		q.execute(f"SELECT COUNT(id) FROM list_chat ")
		chats_count = q.fetchone()[0]
		q.execute(f"SELECT COUNT(id) FROM akk ")
		path = q.fetchone()[0]
		q.execute(f"SELECT DISTINCT chat FROM list_chat")
		chats_unik = q.fetchall()
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text='‚è± –û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è',callback_data='timeupdate'))
		keyboard.add(types.InlineKeyboardButton(text=' üóë –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç',callback_data='–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–£–¥–∞–ª–∏—Ç—å'))
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))
		bot.send_message(call.message.chat.id, f'''<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
<b>‚îú–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{user_count}</code>
<b>‚îú–ü–æ–¥–ø–∏—Å–æ–∫:</b> <code>{podpiska_count}</code>
<b>‚îú–ê–∫–∫–∞—É–Ω—Ç–æ–≤:</b> <code>{path}</code>
<b>‚îú–ß–∞—Ç–æ–≤:</b> <code>{chats_count}</code>
<b>‚îú–û—á–µ—Ä–µ–¥—å:</b> <code>{chats_count_send}</code>
<b>‚îî–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤:</b> <code>{len(chats_unik)}</code>''',parse_mode='HTML', reply_markup=keyboard)

	if a[0] == 'Bomber':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database='h159987_bbb1')
		q = connection.cursor()
		q.execute(f"SELECT COUNT(id) FROM ugc_users")
		user_count = q.fetchone()[0]
		q.execute(f"SELECT COUNT(id) FROM ugc_users where data >= 1")
		podpiska_count = q.fetchone()[0]
		q.execute(f"SELECT COUNT(id) FROM list_number where status = '–í —Ä–∞–±–æ—Ç–µ'")
		count_send = q.fetchone()[0]
		q.execute(f"SELECT COUNT(id) FROM list_number")
		count = q.fetchone()[0]
		keyboard = types.InlineKeyboardMarkup()
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))
		bot.send_message(call.message.chat.id, f'''<b>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
<b>‚îú–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{user_count}</code>
<b>‚îú–ü–æ–¥–ø–∏—Å–æ–∫:</b> <code>{podpiska_count}</code>
<b>‚îú–ó–∞–¥–∞–Ω–∏–π:</b> <code>{count}</code>
<b>‚îî–ó–∞–¥–∞–Ω–∏–π –≤ —Ä–∞–±–æ—Ç–µ:</b> <code>{count_send}</code>''',parse_mode='HTML', reply_markup=keyboard)
	
	if a[0] == '–ü—Ä–æ–º–æ—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		connection = connect(host=config.bd_host,user=config.bd_login,password=config.bd_pass,database=config.bd_base)
		q = connection.cursor()
		keyboard = types.InlineKeyboardMarkup()
		q.execute(f"SELECT * FROM promo")
		rows = q.fetchall()
		text = ''
		for i in rows:
			text += f'‚îú <a href="https://t.me/Smm_Hermes_bot?start={i[1]}">{i[1]}</a> | {i[2]} —á–µ–ª–æ–≤–µ–∫\n'
		keyboard.add(types.InlineKeyboardButton(text=f'‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É',callback_data=f'–î–æ–±–∞–≤–∏—Ç—å—Å—Å—ã–ª–∫—É'))
		keyboard.add(types.InlineKeyboardButton(text=f'‚¨ÖÔ∏è –ù–∞–∑–∞–¥',callback_data=f'–ú–µ–Ω—é'))
		bot.send_message(call.message.chat.id, f'''<b>üìà –ü—Ä–æ–º–æ —Å—Å—ã–ª–∫–∏:</b>
{text}''',parse_mode='HTML', reply_markup=keyboard)

	if a[0] == '–î–æ–±–∞–≤–∏—Ç—å—Å—Å—ã–ª–∫—É':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		msg = bot.send_message(call.message.chat.id, f'''‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏:''',parse_mode='HTML', reply_markup=keyboards.otmena)
		bot.register_next_step_handler(msg, add_promo, msg.message_id)

	if a[0] == '–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–£–¥–∞–ª–∏—Ç—å':
		bot.delete_message(call.message.chat.id,call.message.message_id)
		msg = bot.send_message(call.message.chat.id, f'''‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–∫–∞—É–Ω—Ç–∞:''',parse_mode='HTML', reply_markup=keyboards.otmena)
		bot.register_next_step_handler(msg, dell_akk, msg.message_id)


bot.polling(True)

